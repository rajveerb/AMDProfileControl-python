Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py for run 1
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-114329-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-114329-c4130-node.v100ub
vtune: Executing actions 12 % Loading '114329-114334.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-114334-83aa4981.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 20 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 50.645s
    CPU Time: 7.511s
        Effective Time: 7.511s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 43.131s

Top Hotspots
Function                      Module                                    CPU Time  % of CPU Time(%)
----------------------------  ----------------------------------------  --------  ----------------
jpeg_idct_16x16               libjpeg.so.9                                2.388s             31.8%
ImagingUnpackRGB              _imaging.cpython-310-x86_64-linux-gnu.so    1.644s             21.9%
__memmove_avx_unaligned_erms  libc.so.6                                   1.528s             20.3%
ycc_rgb_convert               libjpeg.so.9                                1.228s             16.3%
jpeg_idct_islow               libjpeg.so.9                                0.536s              7.1%
[Others]                      N/A                                         0.187s              2.5%
Effective Physical Core Utilization: 6.7% (1.072 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.5% (1.110 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.2 MB 
    Collection start time: 20:01:43 07/07/2023 UTC
    Collection stop time: 20:02:33 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py for run 1
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-114593-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-114593-c4130-node.v100ub
vtune: Executing actions 12 % Loading '114593-114598.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-114598-a2ddceb1.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Executing actions 20 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 80.086s
    CPU Time: 19.035s
        Effective Time: 18.999s
        Spin Time: 0.028s
            Imbalance or Serial Spinning: 0.028s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0.008s
            Creation: 0.008s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 78.528s

Top Hotspots
Functionodule           CPU Time  % of CPU Time(%)

c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(float)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>)#2}>>                                                                                                 libtorch_cpu.so   14.271s             75.0%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}>>  libtorch_cpu.so    2.368s             12.4%
at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                libtorch_cpu.so    2.350s             12.3%
gomp_team_barrier_wait_endlibgomp.so.1       0.036s              0.2%
munmaplibc.so.6          0.010s              0.1%
Effective Physical Core Utilization: 77.8% (12.453 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 39.1% (12.515 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.6 MB 
    Collection start time: 20:02:42 07/07/2023 UTC
    Collection stop time: 20:04:02 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py for run 1
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-114723-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-114723-c4130-node.v100ub
vtune: Executing actions 12 % Loading '114723-114728.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-114728-03288899.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 52.770s
    CPU Time: 0.588s
        Effective Time: 0.588s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 52.175s

Top Hotspots
Function              Module                                    CPU Time  % of CPU Time(%)
--------------------  ----------------------------------------  --------  ----------------
ImagingFlipLeftRight  _imaging.cpython-310-x86_64-linux-gnu.so    0.588s            100.0%
Effective Physical Core Utilization: 6.6% (1.054 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.3% (1.065 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 3.9 MB 
    Collection start time: 20:04:19 07/07/2023 UTC
    Collection stop time: 20:05:12 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py for run 1
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-114842-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-114842-c4130-node.v100ub
vtune: Executing actions 12 % Loading '114842-114847.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-114847-23757021.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 52.565s
    CPU Time: 0.607s
        Effective Time: 0.607s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 51.796s

Top Hotspots
Function                        Module                                    CPU Time  % of CPU Time(%)
------------------------------  ----------------------------------------  --------  ----------------
ImagingResampleHorizontal_8bpc  _imaging.cpython-310-x86_64-linux-gnu.so    0.468s             77.1%
__memmove_avx_unaligned_erms    libc.so.6                                   0.109s             18.0%
_int_free                       libc.so.6                                   0.020s              3.3%
ImagingResampleVertical_8bpc    _imaging.cpython-310-x86_64-linux-gnu.so    0.010s              1.6%
Effective Physical Core Utilization: 7.6% (1.210 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.9% (1.232 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.0 MB 
    Collection start time: 20:05:20 07/07/2023 UTC
    Collection stop time: 20:06:12 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py for run 1
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-114958-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-114958-c4130-node.v100ub
vtune: Executing actions 12 % Loading '114958-114963.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-114963-5ca8c672.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 20 % Resolving information for `libgomp.so.1'         
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `_multiarray_umath.cpyt
vtune: Executing actions 21 % Resolving information for `_multiarray_umath.cpyt
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 74.029s
    CPU Time: 24.266s
        Effective Time: 24.190s
        Spin Time: 0.076s
            Imbalance or Serial Spinning: 0.076s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0s
            Creation: 0s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 69.872s

Top Hotspots
Functionodule                                    CPU Time  % of CPU Time(%)

at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                                                                                                                                              libtorch_cpu.so                            10.370s             42.7%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1}>(, signed char, at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1} const&)::{lambda(char**long const*, long, long)#1}>  libtorch_cpu.so                             8.436s             34.8%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(unsigned char)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<unsigned char>)#2}>>                                                                                                                                                                                                               libtorch_cpu.so                             3.262s             13.4%
__memmove_avx_unaligned_ermslibc.so.6                                   1.350s              5.6%
ImagingPackimaging.cpython-310-x86_64-linux-gnu.so    0.704s              2.9%
[Otherss              0.6%
Effective Physical Core Utilization: 31.6% (5.059 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 19.0% (6.080 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 5.0 MB 
    Collection start time: 20:06:20 07/07/2023 UTC
    Collection stop time: 20:07:34 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py for run 2
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-115087-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-115087-c4130-node.v100ub
vtune: Executing actions 12 % Loading '115087-115092.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-115092-edbf52b4.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 20 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 49.929s
    CPU Time: 7.290s
        Effective Time: 7.290s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 42.629s

Top Hotspots
Function                      Module                                    CPU Time  % of CPU Time(%)
----------------------------  ----------------------------------------  --------  ----------------
jpeg_idct_16x16               libjpeg.so.9                                2.204s             30.2%
__memmove_avx_unaligned_erms  libc.so.6                                   1.610s             22.1%
ycc_rgb_convert               libjpeg.so.9                                1.344s             18.4%
ImagingUnpackRGB              _imaging.cpython-310-x86_64-linux-gnu.so    1.336s             18.3%
jpeg_idct_islow               libjpeg.so.9                                0.508s              7.0%
[Others]                      N/A                                         0.288s              4.0%
Effective Physical Core Utilization: 6.6% (1.055 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.4% (1.094 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.2 MB 
    Collection start time: 20:07:50 07/07/2023 UTC
    Collection stop time: 20:08:40 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py for run 2
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-115202-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-115202-c4130-node.v100ub
vtune: Executing actions 12 % Loading '115202-115207.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-115207-39065ccd.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 20 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 80.707s
    CPU Time: 19.294s
        Effective Time: 19.230s
        Spin Time: 0.056s
            Imbalance or Serial Spinning: 0.056s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0.008s
            Creation: 0.008s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 79.109s

Top Hotspots
Function                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Module           CPU Time  % of CPU Time(%)

c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(float)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>)#2}>>                                                                                                 libtorch_cpu.so   14.560s             75.5%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}>>  libtorch_cpu.so    2.338s             12.1%
at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                libtorch_cpu.so    2.322s             12.0%
gomp_team_barrier_wait_endlibgomp.so.1       0.064s              0.3%
munmaplibc.so.6          0.010s              0.1%
Effective Physical Core Utilization: 75.2% (12.036 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 38.1% (12.206 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.6 MB 
    Collection start time: 20:08:49 07/07/2023 UTC
    Collection stop time: 20:10:10 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py for run 2
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-115347-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-115347-c4130-node.v100ub
vtune: Executing actions 12 % Loading '115347-115352.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-115352-8d970196.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 52.815s
    CPU Time: 0.529s
        Effective Time: 0.529s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 52.281s

Top Hotspots
Function              Module                                    CPU Time  % of CPU Time(%)
--------------------  ----------------------------------------  --------  ----------------
ImagingFlipLeftRight  _imaging.cpython-310-x86_64-linux-gnu.so    0.529s            100.0%
Effective Physical Core Utilization: 6.2% (0.992 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.4% (1.072 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 3.9 MB 
    Collection start time: 20:10:26 07/07/2023 UTC
    Collection stop time: 20:11:19 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py for run 2
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-115560-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-115560-c4130-node.v100ub
vtune: Executing actions 12 % Loading '115560-115565.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-115565-7fae2324.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 52.911s
    CPU Time: 1.125s
        Effective Time: 1.125s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 51.627s

Top Hotspots
Function                        Module                                    CPU Time  % of CPU Time(%)
------------------------------  ----------------------------------------  --------  ----------------
ImagingResampleHorizontal_8bpc  _imaging.cpython-310-x86_64-linux-gnu.so    0.892s             79.3%
__memmove_avx_unaligned_erms    libc.so.6                                   0.205s             18.2%
_int_free                       libc.so.6                                   0.020s              1.8%
ImagingResampleVertical_8bpc    _imaging.cpython-310-x86_64-linux-gnu.so    0.008s              0.7%
Effective Physical Core Utilization: 7.1% (1.142 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.7% (1.187 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.0 MB 
    Collection start time: 20:11:27 07/07/2023 UTC
    Collection stop time: 20:12:20 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py for run 2
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-115675-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-115675-c4130-node.v100ub
vtune: Executing actions 12 % Loading '115675-115680.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-115680-b798c5ab.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for dangling locations     
vtune: Executing actions 20 % Resolving information for `_multiarray_umath.cpyt
vtune: Executing actions 21 % Resolving information for `_multiarray_umath.cpyt
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 72.772s
    CPU Time: 25.355s
        Effective Time: 25.279s
        Spin Time: 0.076s
            Imbalance or Serial Spinning: 0.076s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0s
            Creation: 0s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 68.546s

Top Hotspots
Functionodule                                    CPU Time  % of CPU Time(%)

at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                                                                                                                                              libtorch_cpu.so                            10.808s             42.6%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1}>(, signed char, at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1} const&)::{lambda(char**long const*, long, long)#1}>  libtorch_cpu.so                             9.000s             35.5%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(unsigned char)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<unsigned char>)#2}>>                                                                                                                                                                                                               libtorch_cpu.so                             3.391s             13.4%
__memmove_avx_unaligned_ermslibc.so.6                                   1.350s              5.3%
ImagingPackimaging.cpython-310-x86_64-linux-gnu.so    0.652s              2.6%
[Otherss              0.6%
Effective Physical Core Utilization: 35.8% (5.731 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 20.2% (6.474 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 5.0 MB 
    Collection start time: 20:12:28 07/07/2023 UTC
    Collection stop time: 20:13:41 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py for run 3
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-115805-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-115805-c4130-node.v100ub
vtune: Executing actions 12 % Loading '115805-115810.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-115810-22036ae8.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 20 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 49.344s
    CPU Time: 7.169s
        Effective Time: 7.169s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 42.170s

Top Hotspots
Function                      Module                                    CPU Time  % of CPU Time(%)
----------------------------  ----------------------------------------  --------  ----------------
jpeg_idct_16x16               libjpeg.so.9                                2.009s             28.0%
__memmove_avx_unaligned_erms  libc.so.6                                   1.540s             21.5%
ImagingUnpackRGB              _imaging.cpython-310-x86_64-linux-gnu.so    1.469s             20.5%
ycc_rgb_convert               libjpeg.so.9                                1.215s             17.0%
jpeg_idct_islow               libjpeg.so.9                                0.635s              8.9%
[Others]                      N/A                                         0.300s              4.2%
Effective Physical Core Utilization: 6.6% (1.055 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.4% (1.094 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.2 MB 
    Collection start time: 20:13:56 07/07/2023 UTC
    Collection stop time: 20:14:46 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py for run 3
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-115919-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-115919-c4130-node.v100ub
vtune: Executing actions 12 % Loading '115919-115924.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-115924-dc954100.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 20 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 79.143s
    CPU Time: 19.039s
        Effective Time: 18.961s
        Spin Time: 0.070s
            Imbalance or Serial Spinning: 0.070s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0.008s
            Creation: 0.008s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 77.612s

Top Hotspots
Functionodule           CPU Time  % of CPU Time(%)

c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(float)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>)#2}>>                                                                                                 libtorch_cpu.so   14.295s             75.1%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}>>  libtorch_cpu.so    2.336s             12.3%
at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                libtorch_cpu.so    2.320s             12.2%
gomp_team_barrier_wait_endlibgomp.so.1       0.078s              0.4%
munmaplibc.so.6          0.010s              0.1%
Effective Physical Core Utilization: 78.2% (12.519 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 39.6% (12.670 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.6 MB 
    Collection start time: 20:14:54 07/07/2023 UTC
    Collection stop time: 20:16:13 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py for run 3
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-116052-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-116052-c4130-node.v100ub
vtune: Executing actions 12 % Loading '116052-116057.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-116057-b2673192.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 51.643s
    CPU Time: 0.991s
        Effective Time: 0.991s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 50.642s

Top Hotspots
Function              Module                                    CPU Time  % of CPU Time(%)
--------------------  ----------------------------------------  --------  ----------------
ImagingFlipLeftRight  _imaging.cpython-310-x86_64-linux-gnu.so    0.990s             99.9%
__libc_calloc         libc.so.6                                   0.001s              0.1%
Effective Physical Core Utilization: 6.2% (0.990 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.2% (1.040 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 3.9 MB 
    Collection start time: 20:16:29 07/07/2023 UTC
    Collection stop time: 20:17:21 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py for run 3
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-116170-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-116170-c4130-node.v100ub
vtune: Executing actions 12 % Loading '116170-116175.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-116175-adb58f0d.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 52.194s
    CPU Time: 0.717s
        Effective Time: 0.717s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 51.251s

Top Hotspots
Function                        Module                                    CPU Time  % of CPU Time(%)
------------------------------  ----------------------------------------  --------  ----------------
ImagingResampleHorizontal_8bpc  _imaging.cpython-310-x86_64-linux-gnu.so    0.580s             80.9%
__memmove_avx_unaligned_erms    libc.so.6                                   0.109s             15.2%
_int_free                       libc.so.6                                   0.020s              2.8%
ImagingResampleVertical_8bpc    _imaging.cpython-310-x86_64-linux-gnu.so    0.008s              1.1%
Effective Physical Core Utilization: 6.3% (1.016 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.2% (1.031 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.0 MB 
    Collection start time: 20:17:29 07/07/2023 UTC
    Collection stop time: 20:18:21 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py for run 3
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-116285-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-116285-c4130-node.v100ub
vtune: Executing actions 12 % Loading '116285-116290.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-116290-d8911005.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for dangling locations     
vtune: Executing actions 21 % Resolving information for dangling locations     
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 21 % Resolving information for `_multiarray_umath.cpyt
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 73.188s
    CPU Time: 25.733s
        Effective Time: 25.657s
        Spin Time: 0.066s
            Imbalance or Serial Spinning: 0.066s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0.010s
            Creation: 0.010s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 68.984s

Top Hotspots
Functionodule                                    CPU Time  % of CPU Time(%)

at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                                                                                                                                              libtorch_cpu.so                            11.378s             44.2%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1}>(, signed char, at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1} const&)::{lambda(char**long const*, long, long)#1}>  libtorch_cpu.so                             8.952s             34.8%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(unsigned char)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<unsigned char>)#2}>>                                                                                                                                                                                                               libtorch_cpu.so                             3.247s             12.6%
__memmove_avx_unaligned_erms                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    libc.so.6                                   1.340s              5.2%
ImagingPackimaging.cpython-310-x86_64-linux-gnu.so    0.665s              2.6%
[Otherss              0.6%
Effective Physical Core Utilization: 34.6% (5.543 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 20.4% (6.518 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 5.0 MB 
    Collection start time: 20:18:29 07/07/2023 UTC
    Collection stop time: 20:19:42 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py for run 4
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-116414-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-116414-c4130-node.v100ub
vtune: Executing actions 12 % Loading '116414-116419.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-116419-2a2ea699.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 49.688s
    CPU Time: 7.133s
        Effective Time: 7.133s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 42.544s

Top Hotspots
Function                      Module                                    CPU Time  % of CPU Time(%)
----------------------------  ----------------------------------------  --------  ----------------
jpeg_idct_16x16               libjpeg.so.9                                2.158s             30.3%
__memmove_avx_unaligned_erms  libc.so.6                                   1.528s             21.4%
ImagingUnpackRGB              _imaging.cpython-310-x86_64-linux-gnu.so    1.506s             21.1%
ycc_rgb_convert               libjpeg.so.9                                1.056s             14.8%
jpeg_idct_islow               libjpeg.so.9                                0.540s              7.6%
[Others]                      N/A                                         0.345s              4.8%
Effective Physical Core Utilization: 6.6% (1.062 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.4% (1.100 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.2 MB 
    Collection start time: 20:19:57 07/07/2023 UTC
    Collection stop time: 20:20:47 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py for run 4
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-116532-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-116532-c4130-node.v100ub
vtune: Executing actions 12 % Loading '116532-116537.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-116537-e0eec00d.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 20 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 79.183s
    CPU Time: 15.140s
        Effective Time: 15.075s
        Spin Time: 0.065s
            Imbalance or Serial Spinning: 0.065s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0s
            Creation: 0s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 77.691s

Top Hotspots
Functionodule           CPU Time  % of CPU Time(%)

c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(float)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>)#2}>>                                                                                                 libtorch_cpu.so   10.043s             66.3%
at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                libtorch_cpu.so    2.542s             16.8%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}>>  libtorch_cpu.so    2.480s             16.4%
gomp_team_barrier_wait_endlibgomp.so.1       0.035s              0.2%
gomp_simple_barrier_wait                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          libgomp.so.1       0.030s              0.2%
munmaplibc.so.6          0.010s              0.1%
Effective Physical Core Utilization: 61.9% (9.907 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 34.9% (11.165 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.6 MB 
    Collection start time: 20:20:55 07/07/2023 UTC
    Collection stop time: 20:22:14 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py for run 4
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-116661-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-116661-c4130-node.v100ub
vtune: Executing actions 12 % Loading '116661-116666.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-116666-bc6c3f1d.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 51.461s
    CPU Time: 0.941s
        Effective Time: 0.941s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 50.509s

Top Hotspots
Function              Module                                    CPU Time  % of CPU Time(%)
--------------------  ----------------------------------------  --------  ----------------
ImagingFlipLeftRight  _imaging.cpython-310-x86_64-linux-gnu.so    0.940s             99.9%
__GI___libc_malloc    libc.so.6                                   0.001s              0.1%
Effective Physical Core Utilization: 7.7% (1.240 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 4.1% (1.308 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 3.9 MB 
    Collection start time: 20:22:30 07/07/2023 UTC
    Collection stop time: 20:23:22 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py for run 4
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-116775-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-116775-c4130-node.v100ub
vtune: Executing actions 12 % Loading '116775-116780.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-116780-c7f9c4f4.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 51.446s
    CPU Time: 0.595s
        Effective Time: 0.595s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 50.738s

Top Hotspots
Function                        Module                                    CPU Time  % of CPU Time(%)
------------------------------  ----------------------------------------  --------  ----------------
ImagingResampleHorizontal_8bpc  _imaging.cpython-310-x86_64-linux-gnu.so    0.420s             70.6%
__memmove_avx_unaligned_erms    libc.so.6                                   0.145s             24.4%
_int_free                       libc.so.6                                   0.020s              3.4%
ImagingResampleVertical_8bpc    _imaging.cpython-310-x86_64-linux-gnu.so    0.010s              1.7%
Effective Physical Core Utilization: 6.2% (0.992 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.3% (1.057 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.0 MB 
    Collection start time: 20:23:30 07/07/2023 UTC
    Collection stop time: 20:24:22 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py for run 4
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-116894-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-116894-c4130-node.v100ub
vtune: Executing actions 12 % Loading '116894-116899.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-116899-6e59a564.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for dangling locations     
vtune: Executing actions 21 % Resolving information for dangling locations     
vtune: Executing actions 21 % Resolving information for `_multiarray_umath.cpyt
vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 75.824s
    CPU Time: 25.185s
        Effective Time: 25.081s
        Spin Time: 0.094s
            Imbalance or Serial Spinning: 0.094s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0.010s
            Creation: 0.010s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 71.439s

Top Hotspots
Functionodule                                    CPU Time  % of CPU Time(%)

at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                                                                                                                                              libtorch_cpu.so                            10.534s             41.8%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1}>(, signed char, at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1} const&)::{lambda(char**long const*, long, long)#1}>  libtorch_cpu.so                             8.958s             35.6%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(unsigned char)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<unsigned char>)#2}>>                                                                                                                                                                                                               libtorch_cpu.so                             3.253s             12.9%
__memmove_avx_unaligned_ermslibc.so.6                                   1.480s              5.9%
ImagingPackimaging.cpython-310-x86_64-linux-gnu.so    0.805s              3.2%
[Otherss              0.6%
Effective Physical Core Utilization: 32.5% (5.205 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 18.7% (5.985 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 5.0 MB 
    Collection start time: 20:24:30 07/07/2023 UTC
    Collection stop time: 20:25:46 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py for run 5
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-117033-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-117033-c4130-node.v100ub
vtune: Executing actions 12 % Loading '117033-117038.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-117038-8d301162.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 20 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 50.248s
    CPU Time: 8.127s
        Effective Time: 8.127s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 42.107s

Top Hotspots
Function                      Module                                    CPU Time  % of CPU Time(%)
----------------------------  ----------------------------------------  --------  ----------------
jpeg_idct_16x16               libjpeg.so.9                                2.455s             30.2%
ImagingUnpackRGB              _imaging.cpython-310-x86_64-linux-gnu.so    1.716s             21.1%
__memmove_avx_unaligned_erms  libc.so.6                                   1.600s             19.7%
ycc_rgb_convert               libjpeg.so.9                                1.356s             16.7%
jpeg_idct_islow               libjpeg.so.9                                0.659s              8.1%
[Others]                      N/A                                         0.341s              4.2%
Effective Physical Core Utilization: 6.6% (1.052 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.4% (1.093 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.2 MB 
    Collection start time: 20:26:00 07/07/2023 UTC
    Collection stop time: 20:26:50 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py for run 5
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-117148-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-117148-c4130-node.v100ub
vtune: Executing actions 12 % Loading '117148-117153.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-117153-be0419e4.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 20 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 80.257s
    CPU Time: 15.787s
        Effective Time: 15.761s
        Spin Time: 0.016s
            Imbalance or Serial Spinning: 0.016s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0.010s
            Creation: 0.010s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 78.936s

Top Hotspots
Function                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Module           CPU Time  % of CPU Time(%)

c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(float)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>)#2}>>                                                                                                 libtorch_cpu.so   11.011s             69.7%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}>>  libtorch_cpu.so    2.376s             15.1%
at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                libtorch_cpu.so    2.364s             15.0%
gomp_team_barrier_wait_endlibgomp.so.1       0.026s              0.2%
munmaplibc.so.6          0.010s              0.1%
Effective Physical Core Utilization: 73.7% (11.787 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 37.1% (11.860 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.6 MB 
    Collection start time: 20:26:58 07/07/2023 UTC
    Collection stop time: 20:28:18 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py for run 5
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-117281-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-117281-c4130-node.v100ub
vtune: Executing actions 12 % Loading '117281-117286.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-117286-8006c3bd.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 51.061s
    CPU Time: 0.921s
        Effective Time: 0.921s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 50.137s

Top Hotspots
Function              Module                                    CPU Time  % of CPU Time(%)
--------------------  ----------------------------------------  --------  ----------------
ImagingFlipLeftRight  _imaging.cpython-310-x86_64-linux-gnu.so    0.921s            100.0%
Effective Physical Core Utilization: 7.7% (1.232 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.9% (1.252 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 3.9 MB 
    Collection start time: 20:28:35 07/07/2023 UTC
    Collection stop time: 20:29:26 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py for run 5
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-117394-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-117394-c4130-node.v100ub
vtune: Executing actions 12 % Loading '117394-117399.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-117399-9184cfde.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 52.054s
    CPU Time: 0.593s
        Effective Time: 0.593s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 51.260s

Top Hotspots
Function                        Module                                    CPU Time  % of CPU Time(%)
------------------------------  ----------------------------------------  --------  ----------------
ImagingResampleHorizontal_8bpc  _imaging.cpython-310-x86_64-linux-gnu.so    0.472s             79.6%
__memmove_avx_unaligned_erms    libc.so.6                                   0.093s             15.7%
_int_free                       libc.so.6                                   0.020s              3.4%
ImagingResampleVertical_8bpc    _imaging.cpython-310-x86_64-linux-gnu.so    0.008s              1.3%
Effective Physical Core Utilization: 6.6% (1.059 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.4% (1.076 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.0 MB 
    Collection start time: 20:29:34 07/07/2023 UTC
    Collection stop time: 20:30:26 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py for run 5
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-117514-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-117514-c4130-node.v100ub
vtune: Executing actions 12 % Loading '117514-117519.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-117519-d64f68f8.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `libc10.so'            
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 21 % Resolving information for `_multiarray_umath.cpyt
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `_multiarray_umath.cpyt
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 73.319s
    CPU Time: 23.149s
        Effective Time: 23.089s
        Spin Time: 0.050s
            Imbalance or Serial Spinning: 0.050s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0.010s
            Creation: 0.010s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 69.045s

Top Hotspots
Functionodule                                    CPU Time  % of CPU Time(%)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  ----------------------------------------  --------  ----------------
at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                                                                                                                                              libtorch_cpu.so                             9.148s             39.5%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1}>(, signed char, at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1} const&)::{lambda(char**long const*, long, long)#1}>  libtorch_cpu.so                             8.066s             34.8%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(unsigned char)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<unsigned char>)#2}>>                                                                                                                                                                                                               libtorch_cpu.so                             3.465s             15.0%
__memmove_avx_unaligned_ermslibc.so.6                                   1.490s              6.4%
ImagingPackimaging.cpython-310-x86_64-linux-gnu.so    0.857s              3.7%
[Otherss              0.5%
Effective Physical Core Utilization: 25.9% (4.144 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 17.1% (5.465 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 5.0 MB 
    Collection start time: 20:30:35 07/07/2023 UTC
    Collection stop time: 20:31:48 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py for run 6
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-117651-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-117651-c4130-node.v100ub
vtune: Executing actions 12 % Loading '117651-117656.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-117656-56b81ec7.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 49.431s
    CPU Time: 7.189s
        Effective Time: 7.189s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 42.235s

Top Hotspots
Function                      Module                                    CPU Time  % of CPU Time(%)
----------------------------  ----------------------------------------  --------  ----------------
jpeg_idct_16x16               libjpeg.so.9                                2.048s             28.5%
__memmove_avx_unaligned_erms  libc.so.6                                   1.540s             21.4%
ImagingUnpackRGB              _imaging.cpython-310-x86_64-linux-gnu.so    1.480s             20.6%
ycc_rgb_convert               libjpeg.so.9                                1.188s             16.5%
jpeg_idct_islow               libjpeg.so.9                                0.652s              9.1%
[Others]                      N/A                                         0.281s              3.9%
Effective Physical Core Utilization: 6.7% (1.067 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.4% (1.100 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.2 MB 
    Collection start time: 20:32:04 07/07/2023 UTC
    Collection stop time: 20:32:53 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py for run 6
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-117767-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-117767-c4130-node.v100ub
vtune: Executing actions 12 % Loading '117767-117772.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-117772-5e8ca5b4.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Executing actions 20 % Resolving information for `libgomp.so.1'         
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Executing actions 20 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 79.643s
    CPU Time: 17.153s
        Effective Time: 17.091s
        Spin Time: 0.062s
            Imbalance or Serial Spinning: 0.062s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0s
            Creation: 0s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 78.212s

Top Hotspots
Functionodule           CPU Time  % of CPU Time(%)

c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(float)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>)#2}>>                                                                                                 libtorch_cpu.so   12.417s             72.4%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}>>  libtorch_cpu.so    2.352s             13.7%
at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                libtorch_cpu.so    2.312s             13.5%
gomp_team_barrier_wait_endlibgomp.so.1       0.054s              0.3%
munmaplibc.so.6          0.010s              0.1%
gomp_team_endlibgomp.so.1       0.008s              0.0%
Effective Physical Core Utilization: 72.6% (11.612 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 37.1% (11.864 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.6 MB 
    Collection start time: 20:33:02 07/07/2023 UTC
    Collection stop time: 20:34:22 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py for run 6
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-117904-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-117904-c4130-node.v100ub
vtune: Executing actions 12 % Loading '117904-117909.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-117909-18d96578.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 51.277s
    CPU Time: 0.634s
        Effective Time: 0.634s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 50.635s

Top Hotspots
Function              Module                                    CPU Time  % of CPU Time(%)
--------------------  ----------------------------------------  --------  ----------------
ImagingFlipLeftRight  _imaging.cpython-310-x86_64-linux-gnu.so    0.634s            100.0%
Effective Physical Core Utilization: 6.2% (0.988 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.1% (1.000 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 3.9 MB 
    Collection start time: 20:34:38 07/07/2023 UTC
    Collection stop time: 20:35:29 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py for run 6
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-118023-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-118023-c4130-node.v100ub
vtune: Executing actions 12 % Loading '118023-118028.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-118028-da9923d8.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 51.007s
    CPU Time: 0.951s
        Effective Time: 0.951s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 49.883s

Top Hotspots
Function                        Module                                    CPU Time  % of CPU Time(%)
------------------------------  ----------------------------------------  --------  ----------------
ImagingResampleHorizontal_8bpc  _imaging.cpython-310-x86_64-linux-gnu.so    0.780s             82.0%
__memmove_avx_unaligned_erms    libc.so.6                                   0.140s             14.7%
_int_free                       libc.so.6                                   0.020s              2.1%
ImagingResampleVertical_8bpc    _imaging.cpython-310-x86_64-linux-gnu.so    0.010s              1.1%
ImagingCrop                     _imaging.cpython-310-x86_64-linux-gnu.so    0.001s              0.1%
Effective Physical Core Utilization: 6.1% (0.982 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.1% (0.994 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.0 MB 
    Collection start time: 20:35:37 07/07/2023 UTC
    Collection stop time: 20:36:28 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py for run 6
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-118142-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-118142-c4130-node.v100ub
vtune: Executing actions 12 % Loading '118142-118147.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-118147-07e162e0.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 21 % Resolving information for `_multiarray_umath.cpyt
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 74.114s
    CPU Time: 29.106s
        Effective Time: 29.022s
        Spin Time: 0.062s
            Imbalance or Serial Spinning: 0.062s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0.022s
            Creation: 0.022s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 69.019s

Top Hotspots
Functionodule                                    CPU Time  % of CPU Time(%)

at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                                                                                                                                              libtorch_cpu.so                            12.054s             41.4%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1}>(, signed char, at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1} const&)::{lambda(char**long const*, long, long)#1}>  libtorch_cpu.so                            10.658s             36.6%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(unsigned char)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<unsigned char>)#2}>>                                                                                                                                                                                                               libtorch_cpu.so                             3.488s             12.0%
__memmove_avx_unaligned_ermslibc.so.6                                   1.558s              5.4%
ImagingPackimaging.cpython-310-x86_64-linux-gnu.so    1.192s              4.1%
[Otherss              0.5%
Effective Physical Core Utilization: 35.0% (5.594 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 19.0% (6.086 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 5.1 MB 
    Collection start time: 20:36:36 07/07/2023 UTC
    Collection stop time: 20:37:50 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py for run 7
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-118275-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-118275-c4130-node.v100ub
vtune: Executing actions 12 % Loading '118275-118280.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-118280-e1bd1c90.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 50.009s
    CPU Time: 7.154s
        Effective Time: 7.154s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 42.845s

Top Hotspots
Function                      Module                                    CPU Time  % of CPU Time(%)
----------------------------  ----------------------------------------  --------  ----------------
jpeg_idct_16x16               libjpeg.so.9                                2.200s             30.7%
__memmove_avx_unaligned_erms  libc.so.6                                   1.508s             21.1%
ImagingUnpackRGB              _imaging.cpython-310-x86_64-linux-gnu.so    1.372s             19.2%
ycc_rgb_convert               libjpeg.so.9                                1.316s             18.4%
jpeg_idct_islow               libjpeg.so.9                                0.456s              6.4%
[Others]                      N/A                                         0.302s              4.2%
Effective Physical Core Utilization: 6.8% (1.082 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.5% (1.120 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.2 MB 
    Collection start time: 20:38:06 07/07/2023 UTC
    Collection stop time: 20:38:56 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py for run 7
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-118395-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-118395-c4130-node.v100ub
vtune: Executing actions 12 % Loading '118395-118400.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-118400-1ab359f4.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 20 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 80.358s
    CPU Time: 14.232s
        Effective Time: 14.196s
        Spin Time: 0.036s
            Imbalance or Serial Spinning: 0.036s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0s
            Creation: 0s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 79.009s

Top Hotspots
Functionodule           CPU Time  % of CPU Time(%)

c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(float)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>)#2}>>                                                                                                 libtorch_cpu.so    7.912s             55.6%
at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                libtorch_cpu.so    3.182s             22.4%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}>>  libtorch_cpu.so    3.092s             21.7%
gomp_team_barrier_wait_endlibgomp.so.1       0.036s              0.3%
munmaplibc.so.6          0.010s              0.1%
Effective Physical Core Utilization: 50.7% (8.117 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 34.1% (10.903 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.5 MB 
    Collection start time: 20:39:06 07/07/2023 UTC
    Collection stop time: 20:40:26 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py for run 7
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-118533-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-118533-c4130-node.v100ub
vtune: Executing actions 12 % Loading '118533-118538.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-118538-53226a99.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 52.612s
    CPU Time: 0.691s
        Effective Time: 0.691s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 51.916s

Top Hotspots
Function              Module                                    CPU Time  % of CPU Time(%)
--------------------  ----------------------------------------  --------  ----------------
ImagingFlipLeftRight  _imaging.cpython-310-x86_64-linux-gnu.so    0.691s            100.0%
Effective Physical Core Utilization: 7.4% (1.191 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.9% (1.262 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 3.9 MB 
    Collection start time: 20:40:42 07/07/2023 UTC
    Collection stop time: 20:41:35 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py for run 7
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-118651-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-118651-c4130-node.v100ub
vtune: Executing actions 12 % Loading '118651-118656.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-118656-7806872d.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 52.472s
    CPU Time: 0.579s
        Effective Time: 0.579s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 51.779s

Top Hotspots
Function                        Module                                    CPU Time  % of CPU Time(%)
------------------------------  ----------------------------------------  --------  ----------------
ImagingResampleHorizontal_8bpc  _imaging.cpython-310-x86_64-linux-gnu.so    0.410s             70.8%
__memmove_avx_unaligned_erms    libc.so.6                                   0.141s             24.3%
_int_free                       libc.so.6                                   0.020s              3.5%
ImagingResampleVertical_8bpc    _imaging.cpython-310-x86_64-linux-gnu.so    0.008s              1.4%
Effective Physical Core Utilization: 7.2% (1.146 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.6% (1.163 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.0 MB 
    Collection start time: 20:41:43 07/07/2023 UTC
    Collection stop time: 20:42:36 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py for run 7
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-118769-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-118769-c4130-node.v100ub
vtune: Executing actions 12 % Loading '118769-118774.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-118774-a45101d9.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 21 % Resolving information for `_multiarray_umath.cpyt
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 74.097s
    CPU Time: 25.083s
        Effective Time: 24.941s
        Spin Time: 0.124s
            Imbalance or Serial Spinning: 0.124s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0.018s
            Creation: 0.018s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 69.881s

Top Hotspots
Functionodule                                    CPU Time  % of CPU Time(%)

at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                                                                                                                                              libtorch_cpu.so                            10.984s             43.8%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1}>(, signed char, at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1} const&)::{lambda(char**long const*, long, long)#1}>  libtorch_cpu.so                             8.600s             34.3%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(unsigned char)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<unsigned char>)#2}>>                                                                                                                                                                                                               libtorch_cpu.so                             3.266s             13.0%
__memmove_avx_unaligned_ermslibc.so.6                                   1.340s              5.3%
ImagingPackimaging.cpython-310-x86_64-linux-gnu.so    0.693s              2.8%
[Otherss              0.8%
Effective Physical Core Utilization: 30.7% (4.915 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 18.6% (5.942 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 5.0 MB 
    Collection start time: 20:42:43 07/07/2023 UTC
    Collection stop time: 20:43:57 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py for run 8
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-118904-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-118904-c4130-node.v100ub
vtune: Executing actions 12 % Loading '118904-118909.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-118909-fe142da5.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 20 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 48.992s
    CPU Time: 7.370s
        Effective Time: 7.370s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 41.613s

Top Hotspots
Function                      Module                                    CPU Time  % of CPU Time(%)
----------------------------  ----------------------------------------  --------  ----------------
jpeg_idct_16x16               libjpeg.so.9                                2.388s             32.4%
__memmove_avx_unaligned_erms  libc.so.6                                   1.598s             21.7%
ImagingUnpackRGB              _imaging.cpython-310-x86_64-linux-gnu.so    1.524s             20.7%
ycc_rgb_convert               libjpeg.so.9                                1.116s             15.1%
jpeg_idct_islow               libjpeg.so.9                                0.500s              6.8%
[Others]                      N/A                                         0.244s              3.3%
Effective Physical Core Utilization: 6.7% (1.072 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.5% (1.109 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.2 MB 
    Collection start time: 20:44:13 07/07/2023 UTC
    Collection stop time: 20:45:02 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py for run 8
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-119026-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-119026-c4130-node.v100ub
vtune: Executing actions 12 % Loading '119026-119031.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-119031-212cd5bc.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 20 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 20 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 80.514s
    CPU Time: 15.858s
        Effective Time: 15.824s
        Spin Time: 0.024s
            Imbalance or Serial Spinning: 0.024s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0.010s
            Creation: 0.010s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 79.063s

Top Hotspots
Functionodule           CPU Time  % of CPU Time(%)

c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(float)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>)#2}>>                                                                                                 libtorch_cpu.so   11.202s             70.6%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}>>  libtorch_cpu.so    2.312s             14.6%
at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                libtorch_cpu.so    2.300s             14.5%
gomp_team_barrier_wait_endlibgomp.so.1       0.034s              0.2%
munmaplibc.so.6          0.010s              0.1%
Effective Physical Core Utilization: 63.9% (10.216 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 35.6% (11.407 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.6 MB 
    Collection start time: 20:45:11 07/07/2023 UTC
    Collection stop time: 20:46:31 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py for run 8
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-119160-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-119160-c4130-node.v100ub
vtune: Executing actions 12 % Loading '119160-119165.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-119165-f7bfbd31.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 50.443s
    CPU Time: 0.843s
        Effective Time: 0.843s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 49.590s

Top Hotspots
Function              Module                                    CPU Time  % of CPU Time(%)
--------------------  ----------------------------------------  --------  ----------------
ImagingFlipLeftRight  _imaging.cpython-310-x86_64-linux-gnu.so    0.843s            100.0%
Effective Physical Core Utilization: 5.9% (0.936 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.0% (0.948 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 3.9 MB 
    Collection start time: 20:46:48 07/07/2023 UTC
    Collection stop time: 20:47:39 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py for run 8
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-119278-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-119278-c4130-node.v100ub
vtune: Executing actions 12 % Loading '119278-119283.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-119283-172e871f.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 52.626s
    CPU Time: 0.249s
        Effective Time: 0.249s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 52.264s

Top Hotspots
Function                        Module                                    CPU Time  % of CPU Time(%)
------------------------------  ----------------------------------------  --------  ----------------
ImagingResampleHorizontal_8bpc  _imaging.cpython-310-x86_64-linux-gnu.so    0.168s             67.6%
__memmove_avx_unaligned_erms    libc.so.6                                   0.061s             24.4%
_int_free                       libc.so.6                                   0.020s              8.0%
Effective Physical Core Utilization: 6.6% (1.061 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.4% (1.081 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.0 MB 
    Collection start time: 20:47:46 07/07/2023 UTC
    Collection stop time: 20:48:39 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py for run 8
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-119395-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-119395-c4130-node.v100ub
vtune: Executing actions 12 % Loading '119395-119400.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-119400-56a24ca6.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 20 % Resolving information for dangling locations     
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 21 % Resolving information for `_multiarray_umath.cpyt
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 75.063s
    CPU Time: 23.374s
        Effective Time: 23.198s
        Spin Time: 0.176s
            Imbalance or Serial Spinning: 0.176s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0s
            Creation: 0s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 70.455s

Top Hotspots
Functionodule                                    CPU Time  % of CPU Time(%)

at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                                                                                                                                              libtorch_cpu.so                            10.048s             43.0%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1}>(, signed char, at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1} const&)::{lambda(char**long const*, long, long)#1}>  libtorch_cpu.so                             7.074s             30.3%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(unsigned char)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<unsigned char>)#2}>>                                                                                                                                                                                                               libtorch_cpu.so                             3.318s             14.2%
__memmove_avx_unaligned_ermslibc.so.6                                   1.520s              6.5%
ImagingPackimaging.cpython-310-x86_64-linux-gnu.so    1.154s              4.9%
[Otherss              1.1%
Effective Physical Core Utilization: 25.6% (4.100 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 16.8% (5.378 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 5.0 MB 
    Collection start time: 20:48:46 07/07/2023 UTC
    Collection stop time: 20:50:01 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py for run 9
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-119534-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-119534-c4130-node.v100ub
vtune: Executing actions 12 % Loading '119534-119539.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-119539-ab3bf784.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 20 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 50.743s
    CPU Time: 8.057s
        Effective Time: 8.057s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 42.681s

Top Hotspots
Function                      Module                                    CPU Time  % of CPU Time(%)
----------------------------  ----------------------------------------  --------  ----------------
jpeg_idct_16x16               libjpeg.so.9                                2.548s             31.6%
__memmove_avx_unaligned_erms  libc.so.6                                   1.580s             19.6%
ImagingUnpackRGB              _imaging.cpython-310-x86_64-linux-gnu.so    1.548s             19.2%
ycc_rgb_convert               libjpeg.so.9                                1.548s             19.2%
jpeg_idct_islow               libjpeg.so.9                                0.556s              6.9%
[Others]                      N/A                                         0.277s              3.4%
Effective Physical Core Utilization: 6.6% (1.058 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.4% (1.094 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.2 MB 
    Collection start time: 20:50:16 07/07/2023 UTC
    Collection stop time: 20:51:06 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py for run 9
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-119651-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-119651-c4130-node.v100ub
vtune: Executing actions 12 % Loading '119651-119656.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-119656-dc737e62.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 20 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 80.495s
    CPU Time: 15.391s
        Effective Time: 15.333s
        Spin Time: 0.058s
            Imbalance or Serial Spinning: 0.058s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0s
            Creation: 0s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 79.007s

Top Hotspots
Function                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Module           CPU Time  % of CPU Time(%)

c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(float)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>)#2}>>                                                                                                 libtorch_cpu.so   10.351s             67.3%
at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                libtorch_cpu.so    2.510s             16.3%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}>>  libtorch_cpu.so    2.452s             15.9%
gomp_team_barrier_wait_endlibgomp.so.1       0.038s              0.2%
gomp_simple_barrier_waitlibgomp.so.1       0.030s              0.2%
munmaplibc.so.6          0.010s              0.1%
Effective Physical Core Utilization: 56.9% (9.100 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 33.0% (10.552 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.6 MB 
    Collection start time: 20:51:15 07/07/2023 UTC
    Collection stop time: 20:52:35 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py for run 9
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-119846-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-119846-c4130-node.v100ub
vtune: Executing actions 12 % Loading '119846-119851.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-119851-3615e385.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 52.468s
    CPU Time: 1.075s
        Effective Time: 1.075s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 51.386s

Top Hotspots
Function              Module                                    CPU Time  % of CPU Time(%)
--------------------  ----------------------------------------  --------  ----------------
ImagingFlipLeftRight  _imaging.cpython-310-x86_64-linux-gnu.so    1.075s            100.0%
Effective Physical Core Utilization: 6.5% (1.047 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.4% (1.092 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 3.9 MB 
    Collection start time: 20:52:52 07/07/2023 UTC
    Collection stop time: 20:53:45 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py for run 9
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-119962-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-119962-c4130-node.v100ub
vtune: Executing actions 12 % Loading '119962-119967.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-119967-522afe7b.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Executing actions 20 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 52.138s
    CPU Time: 0.428s
        Effective Time: 0.428s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 51.588s

Top Hotspots
Function                        Module                                    CPU Time  % of CPU Time(%)
------------------------------  ----------------------------------------  --------  ----------------
ImagingResampleHorizontal_8bpc  _imaging.cpython-310-x86_64-linux-gnu.so    0.300s             70.0%
__memmove_avx_unaligned_erms    libc.so.6                                   0.108s             25.2%
_int_free                       libc.so.6                                   0.020s              4.7%
func@0x1e7f80                   libtorch_python.so                          0.000s              0.1%
Effective Physical Core Utilization: 7.3% (1.163 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.7% (1.181 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.0 MB 
    Collection start time: 20:53:53 07/07/2023 UTC
    Collection stop time: 20:54:45 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py for run 9
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-120079-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-120079-c4130-node.v100ub
vtune: Executing actions 12 % Loading '120079-120084.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-120084-86846afe.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `_multiarray_umath.cpyt
vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 73.327s
    CPU Time: 23.613s
        Effective Time: 23.549s
        Spin Time: 0.064s
            Imbalance or Serial Spinning: 0.064s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0s
            Creation: 0s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 69.131s

Top Hotspots
Functionodule                                    CPU Time  % of CPU Time(%)

at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                                                                                                                                              libtorch_cpu.so                            10.048s             42.6%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1}>(, signed char, at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1} const&)::{lambda(char**long const*, long, long)#1}>  libtorch_cpu.so                             7.958s             33.7%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(unsigned char)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<unsigned char>)#2}>>                                                                                                                                                                                                               libtorch_cpu.so                             3.310s             14.0%
__memmove_avx_unaligned_ermslibc.so.6                                   1.430s              6.1%
ImagingPackimaging.cpython-310-x86_64-linux-gnu.so    0.701s              3.0%
[Otherss              0.7%
Effective Physical Core Utilization: 29.9% (4.785 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 18.3% (5.862 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 5.0 MB 
    Collection start time: 20:54:54 07/07/2023 UTC
    Collection stop time: 20:56:07 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py for run 10
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-120231-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-120231-c4130-node.v100ub
vtune: Executing actions 12 % Loading '120231-120236.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-120236-b2fe6290.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 49.547s
    CPU Time: 7.157s
        Effective Time: 7.157s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 42.384s

Top Hotspots
Function                      Module                                    CPU Time  % of CPU Time(%)
----------------------------  ----------------------------------------  --------  ----------------
jpeg_idct_16x16               libjpeg.so.9                                2.232s             31.2%
__memmove_avx_unaligned_erms  libc.so.6                                   1.508s             21.1%
ycc_rgb_convert               libjpeg.so.9                                1.316s             18.4%
ImagingUnpackRGB              _imaging.cpython-310-x86_64-linux-gnu.so    1.284s             17.9%
jpeg_idct_islow               libjpeg.so.9                                0.608s              8.5%
[Others]                      N/A                                         0.209s              2.9%
Effective Physical Core Utilization: 6.7% (1.066 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.4% (1.102 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.2 MB 
    Collection start time: 20:56:21 07/07/2023 UTC
    Collection stop time: 20:57:11 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py for run 10
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-120350-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-120350-c4130-node.v100ub
vtune: Executing actions 12 % Loading '120350-120355.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-120355-dcd7f77c.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 20 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 80.418s
    CPU Time: 16.061s
        Effective Time: 15.999s
        Spin Time: 0.062s
            Imbalance or Serial Spinning: 0.062s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0s
            Creation: 0s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 78.947s

Top Hotspots
Functionodule           CPU Time  % of CPU Time(%)

c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(float)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>)#2}>>                                                                                                 libtorch_cpu.so   11.049s             68.8%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}>>  libtorch_cpu.so    2.470s             15.4%
at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                libtorch_cpu.so    2.470s             15.4%
gomp_team_barrier_wait_endlibgomp.so.1       0.062s              0.4%
munmaplibc.so.6          0.010s              0.1%
Effective Physical Core Utilization: 54.6% (8.732 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 32.6% (10.444 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.6 MB 
    Collection start time: 20:57:20 07/07/2023 UTC
    Collection stop time: 20:58:40 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py for run 10
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-120483-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-120483-c4130-node.v100ub
vtune: Executing actions 12 % Loading '120483-120488.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-120488-155d0df9.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 21 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 52.226s
    CPU Time: 0.585s
        Effective Time: 0.585s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 51.639s

Top Hotspots
Function              Module                                    CPU Time  % of CPU Time(%)
--------------------  ----------------------------------------  --------  ----------------
ImagingFlipLeftRight  _imaging.cpython-310-x86_64-linux-gnu.so    0.585s            100.0%
Effective Physical Core Utilization: 7.1% (1.130 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.8% (1.210 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 3.9 MB 
    Collection start time: 20:58:57 07/07/2023 UTC
    Collection stop time: 20:59:49 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py for run 10
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-120602-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-120602-c4130-node.v100ub
vtune: Executing actions 12 % Loading '120602-120607.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-120607-163f32e8.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 51.615s
    CPU Time: 0.588s
        Effective Time: 0.588s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 50.917s

Top Hotspots
Function                        Module                                    CPU Time  % of CPU Time(%)
------------------------------  ----------------------------------------  --------  ----------------
ImagingResampleHorizontal_8bpc  _imaging.cpython-310-x86_64-linux-gnu.so    0.420s             71.4%
__memmove_avx_unaligned_erms    libc.so.6                                   0.140s             23.9%
_int_free                       libc.so.6                                   0.020s              3.4%
ImagingResampleVertical_8bpc    _imaging.cpython-310-x86_64-linux-gnu.so    0.008s              1.4%
Effective Physical Core Utilization: 5.7% (0.909 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 2.9% (0.921 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.0 MB 
    Collection start time: 20:59:58 07/07/2023 UTC
    Collection stop time: 21:00:49 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py for run 10
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-120724-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-120724-c4130-node.v100ub
vtune: Executing actions 12 % Loading '120724-120729.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-120729-2b204a16.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for dangling locations     
vtune: Executing actions 21 % Resolving information for dangling locations     
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 21 % Resolving information for `_multiarray_umath.cpyt
vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 73.784s
    CPU Time: 23.905s
        Effective Time: 23.751s
        Spin Time: 0.126s
            Imbalance or Serial Spinning: 0.126s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0.028s
            Creation: 0.028s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 69.531s

Top Hotspots
Functionodule                                    CPU Time  % of CPU Time(%)

at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                                                                                                                                              libtorch_cpu.so                            10.244s             42.9%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1}>(, signed char, at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1} const&)::{lambda(char**long const*, long, long)#1}>  libtorch_cpu.so                             7.862s             32.9%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(unsigned char)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<unsigned char>)#2}>>                                                                                                                                                                                                               libtorch_cpu.so                             3.328s             13.9%
__memmove_avx_unaligned_ermslibc.so.6                                   1.460s              6.1%
ImagingPackimaging.cpython-310-x86_64-linux-gnu.so    0.793s              3.3%
[Otherss              0.9%
Effective Physical Core Utilization: 29.0% (4.637 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 18.4% (5.904 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 5.0 MB 
    Collection start time: 21:00:57 07/07/2023 UTC
    Collection stop time: 21:02:10 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py for run 11
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-120858-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-120858-c4130-node.v100ub
vtune: Executing actions 12 % Loading '120858-120863.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-120863-7a245ee8.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 21 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 49.293s
    CPU Time: 7.279s
        Effective Time: 7.279s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 42.004s

Top Hotspots
Function                      Module                                    CPU Time  % of CPU Time(%)
----------------------------  ----------------------------------------  --------  ----------------
jpeg_idct_16x16               libjpeg.so.9                                2.176s             29.9%
ImagingUnpackRGB              _imaging.cpython-310-x86_64-linux-gnu.so    1.536s             21.1%
__memmove_avx_unaligned_erms  libc.so.6                                   1.510s             20.7%
ycc_rgb_convert               libjpeg.so.9                                1.144s             15.7%
jpeg_idct_islow               libjpeg.so.9                                0.664s              9.1%
[Others]                      N/A                                         0.249s              3.4%
Effective Physical Core Utilization: 6.7% (1.067 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.5% (1.106 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.2 MB 
    Collection start time: 21:02:26 07/07/2023 UTC
    Collection stop time: 21:03:15 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py for run 11
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-120976-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-120976-c4130-node.v100ub
vtune: Executing actions 12 % Loading '120976-120981.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-120981-657e4eb7.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Executing actions 20 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 79.713s
    CPU Time: 21.578s
        Effective Time: 21.448s
        Spin Time: 0.130s
            Imbalance or Serial Spinning: 0.130s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0s
            Creation: 0s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 78.076s

Top Hotspots
Functionodule           CPU Time  % of CPU Time(%)

c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(float)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>)#2}>>                                                                                                 libtorch_cpu.so   16.751s             77.6%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}>>  libtorch_cpu.so    2.362s             10.9%
at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                libtorch_cpu.so    2.324s             10.8%
gomp_team_barrier_wait_endlibgomp.so.1       0.078s              0.4%
gomp_simple_barrier_wait                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          libgomp.so.1       0.044s              0.2%
[Others]                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          N/A                0.018s              0.1%
Effective Physical Core Utilization: 83.7% (13.391 out of 16)
    Effective Logical Core Utilization: 42.1% (13.474 out of 32)
     | The metric value is low, which may signal a poor utilization of logical
     | CPU cores while the utilization of physical cores is acceptable. Consider
     | using logical cores, which in some cases can improve processor throughput
     | and overall performance of multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.7 MB 
    Collection start time: 21:03:24 07/07/2023 UTC
    Collection stop time: 21:04:43 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py for run 11
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-121112-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-121112-c4130-node.v100ub
vtune: Executing actions 12 % Loading '121112-121117.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-121117-725fcd16.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 51.812s
    CPU Time: 0.705s
        Effective Time: 0.705s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 51.101s

Top Hotspots
Function              Module                                    CPU Time  % of CPU Time(%)
--------------------  ----------------------------------------  --------  ----------------
ImagingFlipLeftRight  _imaging.cpython-310-x86_64-linux-gnu.so    0.705s            100.0%
Effective Physical Core Utilization: 7.8% (1.251 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 4.0% (1.281 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 3.9 MB 
    Collection start time: 21:05:00 07/07/2023 UTC
    Collection stop time: 21:05:51 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py for run 11
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-121232-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-121232-c4130-node.v100ub
vtune: Executing actions 12 % Loading '121232-121237.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-121237-6b602c1d.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 51.657s
    CPU Time: 0.783s
        Effective Time: 0.783s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 50.713s

Top Hotspots
Function                        Module                                    CPU Time  % of CPU Time(%)
------------------------------  ----------------------------------------  --------  ----------------
ImagingResampleHorizontal_8bpc  _imaging.cpython-310-x86_64-linux-gnu.so    0.622s             79.5%
__memmove_avx_unaligned_erms    libc.so.6                                   0.133s             17.0%
_int_free                       libc.so.6                                   0.020s              2.6%
ImagingResampleVertical_8bpc    _imaging.cpython-310-x86_64-linux-gnu.so    0.008s              1.0%
Effective Physical Core Utilization: 6.2% (0.992 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.1% (1.007 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.0 MB 
    Collection start time: 21:06:00 07/07/2023 UTC
    Collection stop time: 21:06:52 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py for run 11
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-121346-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-121346-c4130-node.v100ub
vtune: Executing actions 12 % Loading '121346-121351.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-121351-bd253b1d.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Executing actions 20 % Resolving information for `libgomp.so.1'         
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `_multiarray_umath.cpyt
vtune: Executing actions 21 % Resolving information for `_multiarray_umath.cpyt
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 73.272s
    CPU Time: 21.871s
        Effective Time: 21.791s
        Spin Time: 0.080s
            Imbalance or Serial Spinning: 0.080s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0s
            Creation: 0s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 69.382s

Top Hotspots
Functionodule                                    CPU Time  % of CPU Time(%)

at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                                                                                                                                              libtorch_cpu.so                             9.018s             41.2%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1}>(, signed char, at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1} const&)::{lambda(char**long const*, long, long)#1}>  libtorch_cpu.so                             7.418s             33.9%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(unsigned char)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<unsigned char>)#2}>>                                                                                                                                                                                                               libtorch_cpu.so                             3.282s             15.0%
__memmove_avx_unaligned_ermslibc.so.6                                   1.340s              6.1%
ImagingPackimaging.cpython-310-x86_64-linux-gnu.so    0.682s              3.1%
[Otherss              0.6%
Effective Physical Core Utilization: 26.9% (4.303 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 17.9% (5.740 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.9 MB 
    Collection start time: 21:07:00 07/07/2023 UTC
    Collection stop time: 21:08:13 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py for run 12
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-121477-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-121477-c4130-node.v100ub
vtune: Executing actions 12 % Loading '121477-121482.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-121482-bfd9b2a6.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 48.764s
    CPU Time: 7.272s
        Effective Time: 7.272s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 41.487s

Top Hotspots
Function                      Module                                    CPU Time  % of CPU Time(%)
----------------------------  ----------------------------------------  --------  ----------------
jpeg_idct_16x16               libjpeg.so.9                                2.264s             31.1%
__memmove_avx_unaligned_erms  libc.so.6                                   1.608s             22.1%
ImagingUnpackRGB              _imaging.cpython-310-x86_64-linux-gnu.so    1.432s             19.7%
ycc_rgb_convert               libjpeg.so.9                                1.196s             16.4%
jpeg_idct_islow               libjpeg.so.9                                0.516s              7.1%
[Others]                      N/A                                         0.256s              3.5%
Effective Physical Core Utilization: 6.6% (1.059 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.4% (1.091 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.2 MB 
    Collection start time: 21:08:28 07/07/2023 UTC
    Collection stop time: 21:09:17 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py for run 12
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-121591-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-121591-c4130-node.v100ub
vtune: Executing actions 12 % Loading '121591-121596.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-121596-189cf686.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 20 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 80.514s
    CPU Time: 16.142s
        Effective Time: 16.096s
        Spin Time: 0.046s
            Imbalance or Serial Spinning: 0.046s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0s
            Creation: 0s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 79.261s

Top Hotspots
Functionodule           CPU Time  % of CPU Time(%)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  ---------------  --------  ----------------
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(float)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>)#2}>>                                                                                                 libtorch_cpu.so   11.366s             70.4%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}>>  libtorch_cpu.so    2.402s             14.9%
at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                libtorch_cpu.so    2.310s             14.3%
gomp_team_barrier_wait_endlibgomp.so.1       0.046s              0.3%
munmaplibc.so.6          0.010s              0.1%
gomp_team_endlibgomp.so.1       0.008s              0.0%
Effective Physical Core Utilization: 75.7% (12.109 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 37.9% (12.143 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.6 MB 
    Collection start time: 21:09:26 07/07/2023 UTC
    Collection stop time: 21:10:47 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py for run 12
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-121724-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-121724-c4130-node.v100ub
vtune: Executing actions 12 % Loading '121724-121729.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-121729-22d5c955.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 20 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 51.854s
    CPU Time: 0.539s
        Effective Time: 0.539s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 51.312s

Top Hotspots
Function                   Module                                    CPU Time  % of CPU Time(%)
-------------------------  ----------------------------------------  --------  ----------------
ImagingFlipLeftRight       _imaging.cpython-310-x86_64-linux-gnu.so    0.538s             99.9%
__GI___pthread_mutex_lock  libpthread.so.0                             0.001s              0.1%
Effective Physical Core Utilization: 7.4% (1.178 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.7% (1.197 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 3.9 MB 
    Collection start time: 21:11:03 07/07/2023 UTC
    Collection stop time: 21:11:55 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py for run 12
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-121840-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-121840-c4130-node.v100ub
vtune: Executing actions 12 % Loading '121840-121845.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-121845-3d494134.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 51.254s
    CPU Time: 0.268s
        Effective Time: 0.268s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 50.872s

Top Hotspots
Function                        Module                                    CPU Time  % of CPU Time(%)
------------------------------  ----------------------------------------  --------  ----------------
ImagingResampleHorizontal_8bpc  _imaging.cpython-310-x86_64-linux-gnu.so    0.180s             67.1%
__memmove_avx_unaligned_erms    libc.so.6                                   0.068s             25.5%
_int_free                       libc.so.6                                   0.020s              7.5%
Effective Physical Core Utilization: 7.9% (1.267 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 4.0% (1.289 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.0 MB 
    Collection start time: 21:12:04 07/07/2023 UTC
    Collection stop time: 21:12:55 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py for run 12
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-121953-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-121953-c4130-node.v100ub
vtune: Executing actions 12 % Loading '121953-121958.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-121958-b54d2c0f.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 20 % Resolving information for dangling locations     
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `_multiarray_umath.cpyt
vtune: Executing actions 21 % Resolving information for `_multiarray_umath.cpyt
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 75.685s
    CPU Time: 27.849s
        Effective Time: 27.795s
        Spin Time: 0.054s
            Imbalance or Serial Spinning: 0.054s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0s
            Creation: 0s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 70.705s

Top Hotspots
Functionodule                                    CPU Time  % of CPU Time(%)

at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                                                                                                                                              libtorch_cpu.so                            11.042s             39.6%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1}>(, signed char, at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1} const&)::{lambda(char**long const*, long, long)#1}>  libtorch_cpu.so                            10.588s             38.0%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(unsigned char)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<unsigned char>)#2}>>                                                                                                                                                                                                               libtorch_cpu.so                             3.381s             12.1%
__memmove_avx_unaligned_ermslibc.so.6                                   1.540s              5.5%
ImagingPackimaging.cpython-310-x86_64-linux-gnu.so    1.177s              4.2%
[Otherss              0.4%
Effective Physical Core Utilization: 33.1% (5.291 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 17.7% (5.673 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 5.0 MB 
    Collection start time: 21:13:04 07/07/2023 UTC
    Collection stop time: 21:14:19 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py for run 13
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-122082-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-122082-c4130-node.v100ub
vtune: Executing actions 12 % Loading '122082-122087.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-122087-2e594442.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 20 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 49.560s
    CPU Time: 7.183s
        Effective Time: 7.183s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 42.373s

Top Hotspots
Function                      Module                                    CPU Time  % of CPU Time(%)
----------------------------  ----------------------------------------  --------  ----------------
jpeg_idct_16x16               libjpeg.so.9                                2.208s             30.7%
__memmove_avx_unaligned_erms  libc.so.6                                   1.518s             21.1%
ImagingUnpackRGB              _imaging.cpython-310-x86_64-linux-gnu.so    1.404s             19.5%
ycc_rgb_convert               libjpeg.so.9                                1.208s             16.8%
jpeg_idct_islow               libjpeg.so.9                                0.588s              8.2%
[Others]                      N/A                                         0.257s              3.6%
Effective Physical Core Utilization: 6.7% (1.079 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.5% (1.117 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.1 MB 
    Collection start time: 21:14:34 07/07/2023 UTC
    Collection stop time: 21:15:24 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py for run 13
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-122200-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-122200-c4130-node.v100ub
vtune: Executing actions 12 % Loading '122200-122205.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-122205-57e02e6e.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 20 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 81.127s
    CPU Time: 15.488s
        Effective Time: 15.382s
        Spin Time: 0.096s
            Imbalance or Serial Spinning: 0.096s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0.010s
            Creation: 0.010s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 79.704s

Top Hotspots
Function                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Module           CPU Time  % of CPU Time(%)

c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(float)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>)#2}>>                                                                                                 libtorch_cpu.so   10.408s             67.2%
at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                libtorch_cpu.so    2.520s             16.3%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}>>  libtorch_cpu.so    2.444s             15.8%
gomp_team_barrier_wait_endlibgomp.so.1       0.066s              0.4%
gomp_simple_barrier_waitlibgomp.so.1       0.030s              0.2%
[Otherss              0.1%
Effective Physical Core Utilization: 56.5% (9.040 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 33.4% (10.678 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.6 MB 
    Collection start time: 21:15:32 07/07/2023 UTC
    Collection stop time: 21:16:53 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py for run 13
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-122334-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-122334-c4130-node.v100ub
vtune: Executing actions 12 % Loading '122334-122339.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-122339-677571cb.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 52.117s
    CPU Time: 0.639s
        Effective Time: 0.639s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 51.474s

Top Hotspots
Function              Module                                    CPU Time  % of CPU Time(%)
--------------------  ----------------------------------------  --------  ----------------
ImagingFlipLeftRight  _imaging.cpython-310-x86_64-linux-gnu.so    0.639s            100.0%
Effective Physical Core Utilization: 8.4% (1.351 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 4.3% (1.375 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 3.9 MB 
    Collection start time: 21:17:09 07/07/2023 UTC
    Collection stop time: 21:18:01 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py for run 13
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-122450-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-122450-c4130-node.v100ub
vtune: Executing actions 12 % Loading '122450-122455.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-122455-730cd86f.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 52.207s
    CPU Time: 0.317s
        Effective Time: 0.317s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 51.772s

Top Hotspots
Function                        Module                                    CPU Time  % of CPU Time(%)
------------------------------  ----------------------------------------  --------  ----------------
ImagingResampleHorizontal_8bpc  _imaging.cpython-310-x86_64-linux-gnu.so    0.220s             69.5%
__memmove_avx_unaligned_erms    libc.so.6                                   0.077s             24.2%
_int_free                       libc.so.6                                   0.020s              6.3%
Effective Physical Core Utilization: 6.8% (1.090 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.4% (1.104 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.0 MB 
    Collection start time: 21:18:09 07/07/2023 UTC
    Collection stop time: 21:19:01 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py for run 13
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-122563-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-122563-c4130-node.v100ub
vtune: Executing actions 12 % Loading '122563-122568.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-122568-f27161ef.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for dangling locations     
vtune: Executing actions 21 % Resolving information for dangling locations     
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 21 % Resolving information for `_multiarray_umath.cpyt
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 71.627s
    CPU Time: 22.748s
        Effective Time: 22.648s
        Spin Time: 0.100s
            Imbalance or Serial Spinning: 0.100s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0s
            Creation: 0s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 67.516s

Top Hotspots
Functionodule                                    CPU Time  % of CPU Time(%)

at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                                                                                                                                              libtorch_cpu.so                             9.938s             43.7%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1}>(, signed char, at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1} const&)::{lambda(char**long const*, long, long)#1}>  libtorch_cpu.so                             7.136s             31.4%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(unsigned char)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<unsigned char>)#2}>>                                                                                                                                                                                                               libtorch_cpu.so                             3.334s             14.7%
__memmove_avx_unaligned_ermslibc.so.6                                   1.418s              6.2%
ImagingPackimaging.cpython-310-x86_64-linux-gnu.so    0.749s              3.3%
[Others]                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        N/A                                         0.174s              0.8%
Effective Physical Core Utilization: 28.7% (4.598 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 18.1% (5.804 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 5.0 MB 
    Collection start time: 21:19:09 07/07/2023 UTC
    Collection stop time: 21:20:20 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py for run 14
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-122698-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-122698-c4130-node.v100ub
vtune: Executing actions 12 % Loading '122698-122703.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-122703-62291913.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 49.787s
    CPU Time: 7.302s
        Effective Time: 7.302s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 42.476s

Top Hotspots
Function                      Module                                    CPU Time  % of CPU Time(%)
----------------------------  ----------------------------------------  --------  ----------------
jpeg_idct_16x16               libjpeg.so.9                                2.204s             30.2%
__memmove_avx_unaligned_erms  libc.so.6                                   1.510s             20.7%
ImagingUnpackRGB              _imaging.cpython-310-x86_64-linux-gnu.so    1.392s             19.1%
ycc_rgb_convert               libjpeg.so.9                                1.256s             17.2%
jpeg_idct_islow               libjpeg.so.9                                0.672s              9.2%
[Others]                      N/A                                         0.268s              3.7%
Effective Physical Core Utilization: 6.6% (1.059 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.4% (1.096 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.3 MB 
    Collection start time: 21:20:36 07/07/2023 UTC
    Collection stop time: 21:21:26 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py for run 14
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-122813-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-122813-c4130-node.v100ub
vtune: Executing actions 12 % Loading '122813-122818.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-122818-9d2d0e5b.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 20 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 80.796s
    CPU Time: 17.429s
        Effective Time: 17.409s
        Spin Time: 0.010s
            Imbalance or Serial Spinning: 0.010s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0.010s
            Creation: 0.010s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 79.432s

Top Hotspots
Functionodule           CPU Time  % of CPU Time(%)

c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(float)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>)#2}>>                                                                                                 libtorch_cpu.so   12.711s             72.9%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}>>  libtorch_cpu.so    2.364s             13.6%
at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                libtorch_cpu.so    2.324s             13.3%
gomp_team_barrier_wait_endlibgomp.so.1       0.020s              0.1%
munmaplibc.so.6          0.010s              0.1%
Effective Physical Core Utilization: 78.7% (12.596 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 39.5% (12.647 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.6 MB 
    Collection start time: 21:21:34 07/07/2023 UTC
    Collection stop time: 21:22:55 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py for run 14
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-122955-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-122955-c4130-node.v100ub
vtune: Executing actions 12 % Loading '122955-122960.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-122960-9cd21854.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 52.085s
    CPU Time: 1.070s
        Effective Time: 1.070s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 51.008s

Top Hotspots
Function              Module                                    CPU Time  % of CPU Time(%)
--------------------  ----------------------------------------  --------  ----------------
ImagingFlipLeftRight  _imaging.cpython-310-x86_64-linux-gnu.so    1.070s            100.0%
Effective Physical Core Utilization: 6.7% (1.064 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.5% (1.114 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 3.9 MB 
    Collection start time: 21:23:11 07/07/2023 UTC
    Collection stop time: 21:24:03 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py for run 14
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-123069-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-123069-c4130-node.v100ub
vtune: Executing actions 12 % Loading '123069-123074.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-123074-f1de93ac.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 51.884s
    CPU Time: 0.573s
        Effective Time: 0.573s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 51.211s

Top Hotspots
Function                        Module                                    CPU Time  % of CPU Time(%)
------------------------------  ----------------------------------------  --------  ----------------
ImagingResampleHorizontal_8bpc  _imaging.cpython-310-x86_64-linux-gnu.so    0.392s             68.4%
__memmove_avx_unaligned_erms    libc.so.6                                   0.145s             25.4%
_int_free                       libc.so.6                                   0.020s              3.5%
_PyDict_LoadGlobal              python3.10                                  0.008s              1.4%
ImagingResampleVertical_8bpc    _imaging.cpython-310-x86_64-linux-gnu.so    0.008s              1.4%
Effective Physical Core Utilization: 6.4% (1.017 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.2% (1.032 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.0 MB 
    Collection start time: 21:24:13 07/07/2023 UTC
    Collection stop time: 21:25:05 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py for run 14
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-123186-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-123186-c4130-node.v100ub
vtune: Executing actions 12 % Loading '123186-123191.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-123191-eba92fc4.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 19 % Resolving information for `_multiarray_umath.cpyt
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 20 % Resolving information for `libc10.so'            
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 20 % Resolving information for dangling locations     
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 21 % Resolving information for dangling locations     
vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 72.580s
    CPU Time: 22.013s
        Effective Time: 21.911s
        Spin Time: 0.094s
            Imbalance or Serial Spinning: 0.094s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0.008s
            Creation: 0.008s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 68.682s

Top Hotspots
Functionodule                                    CPU Time  % of CPU Time(%)

at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                                                                                                                                              libtorch_cpu.so                             9.232s             41.9%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1}>(, signed char, at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1} const&)::{lambda(char**long const*, long, long)#1}>  libtorch_cpu.so                             7.246s             32.9%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(unsigned char)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<unsigned char>)#2}>>                                                                                                                                                                                                               libtorch_cpu.so                             3.363s             15.3%
__memmove_avx_unaligned_ermslibc.so.6                                   1.340s              6.1%
ImagingPackimaging.cpython-310-x86_64-linux-gnu.so    0.657s              3.0%
[Otherss              0.8%
Effective Physical Core Utilization: 27.2% (4.355 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 18.4% (5.874 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 5.0 MB 
    Collection start time: 21:25:12 07/07/2023 UTC
    Collection stop time: 21:26:25 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py for run 15
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-123318-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-123318-c4130-node.v100ub
vtune: Executing actions 12 % Loading '123318-123323.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-123323-1224ec16.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 49.287s
    CPU Time: 7.097s
        Effective Time: 7.097s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 42.178s

Top Hotspots
Function                      Module                                    CPU Time  % of CPU Time(%)
----------------------------  ----------------------------------------  --------  ----------------
jpeg_idct_16x16               libjpeg.so.9                                2.032s             28.6%
__memmove_avx_unaligned_erms  libc.so.6                                   1.520s             21.4%
ImagingUnpackRGB              _imaging.cpython-310-x86_64-linux-gnu.so    1.448s             20.4%
ycc_rgb_convert               libjpeg.so.9                                1.136s             16.0%
jpeg_idct_islow               libjpeg.so.9                                0.684s              9.6%
[Others]                      N/A                                         0.277s              3.9%
Effective Physical Core Utilization: 6.6% (1.062 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.4% (1.101 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.2 MB 
    Collection start time: 21:26:40 07/07/2023 UTC
    Collection stop time: 21:27:29 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py for run 15
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-123434-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-123434-c4130-node.v100ub
vtune: Executing actions 12 % Loading '123434-123439.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-123439-57ea5354.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 20 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 80.760s
    CPU Time: 16.079s
        Effective Time: 16.027s
        Spin Time: 0.052s
            Imbalance or Serial Spinning: 0.052s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0s
            Creation: 0s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 79.510s

Top Hotspots
Function                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Module           CPU Time  % of CPU Time(%)

c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(float)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>)#2}>>                                                                                                 libtorch_cpu.so   11.335s             70.5%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}>>  libtorch_cpu.so    2.356s             14.7%
at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                libtorch_cpu.so    2.326s             14.5%
gomp_team_barrier_wait_endlibgomp.so.1       0.044s              0.3%
munmaplibc.so.6          0.010s              0.1%
gomp_team_end                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     libgomp.so.1       0.008s              0.0%
Effective Physical Core Utilization: 86.0% (13.757 out of 16)
    Effective Logical Core Utilization: 43.2% (13.810 out of 32)
     | The metric value is low, which may signal a poor utilization of logical
     | CPU cores while the utilization of physical cores is acceptable. Consider
     | using logical cores, which in some cases can improve processor throughput
     | and overall performance of multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.6 MB 
    Collection start time: 21:27:38 07/07/2023 UTC
    Collection stop time: 21:28:59 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py for run 15
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-123563-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-123563-c4130-node.v100ub
vtune: Executing actions 12 % Loading '123563-123568.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-123568-5b03ae14.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 52.030s
    CPU Time: 0.989s
        Effective Time: 0.989s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 51.036s

Top Hotspots
Function              Module                                    CPU Time  % of CPU Time(%)
--------------------  ----------------------------------------  --------  ----------------
ImagingFlipLeftRight  _imaging.cpython-310-x86_64-linux-gnu.so    0.989s            100.0%
Effective Physical Core Utilization: 6.7% (1.076 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.4% (1.093 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 3.9 MB 
    Collection start time: 21:29:15 07/07/2023 UTC
    Collection stop time: 21:30:07 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py for run 15
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-123682-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-123682-c4130-node.v100ub
vtune: Executing actions 12 % Loading '123682-123687.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-123687-efac98f2.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 52.662s
    CPU Time: 0.289s
        Effective Time: 0.289s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 52.265s

Top Hotspots
Function                        Module                                    CPU Time  % of CPU Time(%)
------------------------------  ----------------------------------------  --------  ----------------
ImagingResampleHorizontal_8bpc  _imaging.cpython-310-x86_64-linux-gnu.so    0.200s             69.3%
__memmove_avx_unaligned_erms    libc.so.6                                   0.069s             23.8%
_int_free                       libc.so.6                                   0.020s              6.9%
Effective Physical Core Utilization: 5.6% (0.890 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 2.8% (0.906 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.0 MB 
    Collection start time: 21:30:17 07/07/2023 UTC
    Collection stop time: 21:31:09 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py for run 15
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-123795-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-123795-c4130-node.v100ub
vtune: Executing actions 12 % Loading '123795-123800.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-123800-fa924bc6.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 20 % Resolving information for `libgomp.so.1'         
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `_multiarray_umath.cpyt
vtune: Executing actions 21 % Resolving information for `_multiarray_umath.cpyt
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 73.659s
    CPU Time: 21.576s
        Effective Time: 21.490s
        Spin Time: 0.076s
            Imbalance or Serial Spinning: 0.076s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0.010s
            Creation: 0.010s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 69.727s

Top Hotspots
Functionodule                                    CPU Time  % of CPU Time(%)

at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                                                                                                                                              libtorch_cpu.so                             8.928s             41.4%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1}>(, signed char, at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1} const&)::{lambda(char**long const*, long, long)#1}>  libtorch_cpu.so                             7.142s             33.1%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(unsigned char)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<unsigned char>)#2}>>                                                                                                                                                                                                               libtorch_cpu.so                             3.398s             15.7%
__memmove_avx_unaligned_ermslibc.so.6                                   1.338s              6.2%
ImagingPackimaging.cpython-310-x86_64-linux-gnu.so    0.628s              2.9%
[Otherss              0.7%
Effective Physical Core Utilization: 24.6% (3.931 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 16.9% (5.398 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.9 MB 
    Collection start time: 21:31:17 07/07/2023 UTC
    Collection stop time: 21:32:30 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py for run 16
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-123926-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-123926-c4130-node.v100ub
vtune: Executing actions 12 % Loading '123926-123931.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-123931-4a778118.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 20 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 49.294s
    CPU Time: 7.125s
        Effective Time: 7.125s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 42.156s

Top Hotspots
Function                      Module                                    CPU Time  % of CPU Time(%)
----------------------------  ----------------------------------------  --------  ----------------
jpeg_idct_16x16               libjpeg.so.9                                1.986s             27.9%
__memmove_avx_unaligned_erms  libc.so.6                                   1.540s             21.6%
ImagingUnpackRGB              _imaging.cpython-310-x86_64-linux-gnu.so    1.526s             21.4%
ycc_rgb_convert               libjpeg.so.9                                1.112s             15.6%
jpeg_idct_islow               libjpeg.so.9                                0.652s              9.2%
[Others]                      N/A                                         0.309s              4.3%
Effective Physical Core Utilization: 6.6% (1.053 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.4% (1.094 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.1 MB 
    Collection start time: 21:32:46 07/07/2023 UTC
    Collection stop time: 21:33:35 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py for run 16
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-124040-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-124040-c4130-node.v100ub
vtune: Executing actions 12 % Loading '124040-124045.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-124045-f8e853ea.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 20 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 78.731s
    CPU Time: 15.814s
        Effective Time: 15.752s
        Spin Time: 0.054s
            Imbalance or Serial Spinning: 0.054s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0.008s
            Creation: 0.008s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 77.504s

Top Hotspots
Functionodule           CPU Time  % of CPU Time(%)

c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(float)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>)#2}>>                                                                                                 libtorch_cpu.so   11.050s             69.9%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}>>  libtorch_cpu.so    2.390s             15.1%
at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                libtorch_cpu.so    2.302s             14.6%
gomp_team_barrier_wait_endlibgomp.so.1       0.054s              0.3%
munmaplibc.so.6          0.010s              0.1%
gomp_team_endlibgomp.so.1       0.008s              0.1%
Effective Physical Core Utilization: 83.4% (13.348 out of 16)
    Effective Logical Core Utilization: 41.9% (13.423 out of 32)
     | The metric value is low, which may signal a poor utilization of logical
     | CPU cores while the utilization of physical cores is acceptable. Consider
     | using logical cores, which in some cases can improve processor throughput
     | and overall performance of multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.6 MB 
    Collection start time: 21:33:44 07/07/2023 UTC
    Collection stop time: 21:35:02 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py for run 16
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-124172-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-124172-c4130-node.v100ub
vtune: Executing actions 12 % Loading '124172-124177.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-124177-0749d000.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 51.888s
    CPU Time: 0.548s
        Effective Time: 0.548s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 51.338s

Top Hotspots
Function                  Module                                    CPU Time  % of CPU Time(%)
------------------------  ----------------------------------------  --------  ----------------
ImagingFlipLeftRight      _imaging.cpython-310-x86_64-linux-gnu.so    0.538s             98.2%
_PyEval_EvalFrameDefault  python3.10                                  0.010s              1.8%
Effective Physical Core Utilization: 7.0% (1.122 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.6% (1.138 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 3.9 MB 
    Collection start time: 21:35:19 07/07/2023 UTC
    Collection stop time: 21:36:11 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py for run 16
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-124286-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-124286-c4130-node.v100ub
vtune: Executing actions 12 % Loading '124286-124291.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-124291-853a36d5.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 53.529s
    CPU Time: 0.703s
        Effective Time: 0.703s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 52.673s

Top Hotspots
Function                        Module                                    CPU Time  % of CPU Time(%)
------------------------------  ----------------------------------------  --------  ----------------
ImagingResampleHorizontal_8bpc  _imaging.cpython-310-x86_64-linux-gnu.so    0.560s             79.7%
__memmove_avx_unaligned_erms    libc.so.6                                   0.113s             16.0%
_int_free                       libc.so.6                                   0.020s              2.8%
ImagingResampleVertical_8bpc    _imaging.cpython-310-x86_64-linux-gnu.so    0.010s              1.4%
Effective Physical Core Utilization: 7.2% (1.157 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.8% (1.216 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.0 MB 
    Collection start time: 21:36:20 07/07/2023 UTC
    Collection stop time: 21:37:13 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py for run 16
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-124399-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-124399-c4130-node.v100ub
vtune: Executing actions 12 % Loading '124399-124404.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-124404-aba68245.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for dangling locations     
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 21 % Resolving information for `_multiarray_umath.cpyt
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 72.866s
    CPU Time: 21.562s
        Effective Time: 21.482s
        Spin Time: 0.080s
            Imbalance or Serial Spinning: 0.080s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0s
            Creation: 0s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 68.764s

Top Hotspots
Function                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Module                                    CPU Time  % of CPU Time(%)

at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                                                                                                                                              libtorch_cpu.so                             8.854s             41.1%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1}>(, signed char, at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1} const&)::{lambda(char**long const*, long, long)#1}>  libtorch_cpu.so                             6.856s             31.8%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(unsigned char)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<unsigned char>)#2}>>                                                                                                                                                                                                               libtorch_cpu.so                             3.533s             16.4%
__memmove_avx_unaligned_ermslibc.so.6                                   1.410s              6.5%
ImagingPackimaging.cpython-310-x86_64-linux-gnu.so    0.750s              3.5%
[Otherss              0.7%
Effective Physical Core Utilization: 24.8% (3.960 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 17.1% (5.472 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.9 MB 
    Collection start time: 21:37:21 07/07/2023 UTC
    Collection stop time: 21:38:34 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py for run 17
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-124532-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-124532-c4130-node.v100ub
vtune: Executing actions 12 % Loading '124532-124537.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-124537-e3e734cc.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 21 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 50.360s
    CPU Time: 7.790s
        Effective Time: 7.790s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 42.567s

Top Hotspots
Function                      Module                                    CPU Time  % of CPU Time(%)
----------------------------  ----------------------------------------  --------  ----------------
jpeg_idct_16x16               libjpeg.so.9                                2.384s             30.6%
__memmove_avx_unaligned_erms  libc.so.6                                   1.518s             19.5%
ycc_rgb_convert               libjpeg.so.9                                1.496s             19.2%
ImagingUnpackRGB              _imaging.cpython-310-x86_64-linux-gnu.so    1.452s             18.6%
jpeg_idct_islow               libjpeg.so.9                                0.624s              8.0%
[Others]                      N/A                                         0.316s              4.1%
Effective Physical Core Utilization: 6.7% (1.074 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.5% (1.110 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.2 MB 
    Collection start time: 21:38:49 07/07/2023 UTC
    Collection stop time: 21:39:39 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py for run 17
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-124645-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-124645-c4130-node.v100ub
vtune: Executing actions 12 % Loading '124645-124650.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-124650-d31e6de5.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 20 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 78.874s
    CPU Time: 14.718s
        Effective Time: 14.570s
        Spin Time: 0.148s
            Imbalance or Serial Spinning: 0.148s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0s
            Creation: 0s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 77.532s

Top Hotspots
Functionodule           CPU Time  % of CPU Time(%)

c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(float)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>)#2}>>                                                                                                 libtorch_cpu.so   10.002s             68.0%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}>>  libtorch_cpu.so    2.286s             15.5%
at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                libtorch_cpu.so    2.262s             15.4%
gomp_simple_barrier_waitlibgomp.so.1       0.082s              0.6%
gomp_team_barrier_wait_endlibgomp.so.1       0.076s              0.5%
munmaplibc.so.6          0.010s              0.1%
Effective Physical Core Utilization: 66.7% (10.665 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 35.5% (11.370 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.6 MB 
    Collection start time: 21:39:48 07/07/2023 UTC
    Collection stop time: 21:41:07 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py for run 17
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-124778-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-124778-c4130-node.v100ub
vtune: Executing actions 12 % Loading '124778-124783.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-124783-a312f0e6.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 20 % Resolving information for dangling locations     
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 51.643s
    CPU Time: 0.970s
        Effective Time: 0.970s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 50.664s

Top Hotspots
Function              Module                                    CPU Time  % of CPU Time(%)
--------------------  ----------------------------------------  --------  ----------------
ImagingFlipLeftRight  _imaging.cpython-310-x86_64-linux-gnu.so    0.970s            100.0%
Effective Physical Core Utilization: 6.3% (1.009 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.3% (1.061 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 3.9 MB 
    Collection start time: 21:41:23 07/07/2023 UTC
    Collection stop time: 21:42:14 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py for run 17
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-124950-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-124950-c4130-node.v100ub
vtune: Executing actions 12 % Loading '124950-124955.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-124955-b1287d22.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 51.911s
    CPU Time: 0.425s
        Effective Time: 0.425s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 51.261s

Top Hotspots
Function                        Module                                    CPU Time  % of CPU Time(%)
------------------------------  ----------------------------------------  --------  ----------------
ImagingResampleHorizontal_8bpc  _imaging.cpython-310-x86_64-linux-gnu.so    0.320s             75.4%
__memmove_avx_unaligned_erms    libc.so.6                                   0.065s             15.2%
ImagingResampleVertical_8bpc    _imaging.cpython-310-x86_64-linux-gnu.so    0.020s              4.7%
_int_free                       libc.so.6                                   0.020s              4.7%
Effective Physical Core Utilization: 6.1% (0.982 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.1% (0.995 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.0 MB 
    Collection start time: 21:42:23 07/07/2023 UTC
    Collection stop time: 21:43:14 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py for run 17
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-125066-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-125066-c4130-node.v100ub
vtune: Executing actions 12 % Loading '125066-125071.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-125071-0d936e0e.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 21 % Resolving information for `_multiarray_umath.cpyt
vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 74.505s
    CPU Time: 23.379s
        Effective Time: 23.309s
        Spin Time: 0.050s
            Imbalance or Serial Spinning: 0.050s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0.020s
            Creation: 0.020s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 70.356s

Top Hotspots
Functionodule                                    CPU Time  % of CPU Time(%)

at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                                                                                                                                              libtorch_cpu.so                            10.210s             43.7%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1}>(, signed char, at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1} const&)::{lambda(char**long const*, long, long)#1}>  libtorch_cpu.so                             7.466s             31.9%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(unsigned char)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<unsigned char>)#2}>>                                                                                                                                                                                                               libtorch_cpu.so                             3.490s             14.9%
__memmove_avx_unaligned_ermslibc.so.6                                   1.336s              5.7%
ImagingPackimaging.cpython-310-x86_64-linux-gnu.so    0.709s              3.0%
[Otherss              0.7%
Effective Physical Core Utilization: 28.7% (4.592 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 18.0% (5.756 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 5.0 MB 
    Collection start time: 21:43:22 07/07/2023 UTC
    Collection stop time: 21:44:37 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py for run 18
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-125198-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-125198-c4130-node.v100ub
vtune: Executing actions 12 % Loading '125198-125203.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-125203-69b96f4c.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 20 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 49.981s
    CPU Time: 7.844s
        Effective Time: 7.844s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 42.128s

Top Hotspots
Function                      Module                                    CPU Time  % of CPU Time(%)
----------------------------  ----------------------------------------  --------  ----------------
jpeg_idct_16x16               libjpeg.so.9                                2.360s             30.1%
ImagingUnpackRGB              _imaging.cpython-310-x86_64-linux-gnu.so    1.584s             20.2%
__memmove_avx_unaligned_erms  libc.so.6                                   1.520s             19.4%
ycc_rgb_convert               libjpeg.so.9                                1.248s             15.9%
jpeg_idct_islow               libjpeg.so.9                                0.768s              9.8%
[Others]                      N/A                                         0.365s              4.6%
Effective Physical Core Utilization: 6.6% (1.054 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.4% (1.092 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.2 MB 
    Collection start time: 21:44:52 07/07/2023 UTC
    Collection stop time: 21:45:42 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py for run 18
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-125314-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-125314-c4130-node.v100ub
vtune: Executing actions 12 % Loading '125314-125319.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-125319-2417f907.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 20 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 83.154s
    CPU Time: 16.949s
        Effective Time: 16.903s
        Spin Time: 0.046s
            Imbalance or Serial Spinning: 0.046s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0s
            Creation: 0s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 81.737s

Top Hotspots
Functionodule           CPU Time  % of CPU Time(%)

c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(float)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>)#2}>>                                                                                                 libtorch_cpu.so   12.183s             71.9%
at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                libtorch_cpu.so    2.366s             14.0%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}>>  libtorch_cpu.so    2.344s             13.8%
gomp_team_barrier_wait_endlibgomp.so.1       0.046s              0.3%
munmaplibc.so.6          0.010s              0.1%
Effective Physical Core Utilization: 75.7% (12.120 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 38.0% (12.166 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.6 MB 
    Collection start time: 21:45:50 07/07/2023 UTC
    Collection stop time: 21:47:13 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py for run 18
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-125443-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-125443-c4130-node.v100ub
vtune: Executing actions 12 % Loading '125443-125448.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-125448-5ba0fef0.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Executing actions 20 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 52.437s
    CPU Time: 0.591s
        Effective Time: 0.591s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 51.839s

Top Hotspots
Function                          Module                                    CPU Time  % of CPU Time(%)
--------------------------------  ----------------------------------------  --------  ----------------
ImagingFlipLeftRight              _imaging.cpython-310-x86_64-linux-gnu.so    0.590s             99.9%
c10::impl::OperatorEntry::lookup  libtorch_cpu.so                             0.001s              0.1%
Effective Physical Core Utilization: 6.7% (1.066 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.4% (1.083 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.1 MB 
    Collection start time: 21:47:30 07/07/2023 UTC
    Collection stop time: 21:48:22 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py for run 18
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-125558-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-125558-c4130-node.v100ub
vtune: Executing actions 12 % Loading '125558-125563.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-125563-79ad8997.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 51.717s
    CPU Time: 0.303s
        Effective Time: 0.303s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 51.292s

Top Hotspots
Function                        Module                                    CPU Time  % of CPU Time(%)
------------------------------  ----------------------------------------  --------  ----------------
ImagingResampleHorizontal_8bpc  _imaging.cpython-310-x86_64-linux-gnu.so    0.210s             69.2%
__memmove_avx_unaligned_erms    libc.so.6                                   0.073s             24.2%
_int_free                       libc.so.6                                   0.020s              6.6%
Effective Physical Core Utilization: 5.6% (0.904 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 2.9% (0.921 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.0 MB 
    Collection start time: 21:48:44 07/07/2023 UTC
    Collection stop time: 21:49:36 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py for run 18
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-125673-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-125673-c4130-node.v100ub
vtune: Executing actions 12 % Loading '125673-125678.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-125678-593663b6.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `_multiarray_umath.cpyt
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 72.827s
    CPU Time: 22.240s
        Effective Time: 22.094s
        Spin Time: 0.146s
            Imbalance or Serial Spinning: 0.146s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0s
            Creation: 0s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 68.296s

Top Hotspots
Functionodule                                    CPU Time  % of CPU Time(%)

at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                                                                                                                                              libtorch_cpu.so                             8.682s             39.0%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1}>(, signed char, at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1} const&)::{lambda(char**long const*, long, long)#1}>  libtorch_cpu.so                             7.090s             31.9%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(unsigned char)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<unsigned char>)#2}>>                                                                                                                                                                                                               libtorch_cpu.so                             3.561s             16.0%
__memmove_avx_unaligned_ermslibc.so.6                                   1.538s              6.9%
ImagingPackimaging.cpython-310-x86_64-linux-gnu.so    1.140s              5.1%
[Otherss              1.0%
Effective Physical Core Utilization: 23.6% (3.782 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 16.5% (5.293 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 5.0 MB 
    Collection start time: 21:49:44 07/07/2023 UTC
    Collection stop time: 21:50:56 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py for run 19
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-125805-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-125805-c4130-node.v100ub
vtune: Executing actions 12 % Loading '125805-125810.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-125810-06c5f859.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 50.790s
    CPU Time: 8.108s
        Effective Time: 8.108s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 42.677s

Top Hotspots
Function                      Module                                    CPU Time  % of CPU Time(%)
----------------------------  ----------------------------------------  --------  ----------------
jpeg_idct_16x16               libjpeg.so.9                                2.324s             28.7%
__memmove_avx_unaligned_erms  libc.so.6                                   1.600s             19.7%
ImagingUnpackRGB              _imaging.cpython-310-x86_64-linux-gnu.so    1.572s             19.4%
ycc_rgb_convert               libjpeg.so.9                                1.472s             18.2%
jpeg_idct_islow               libjpeg.so.9                                0.668s              8.2%
[Others]                      N/A                                         0.472s              5.8%
Effective Physical Core Utilization: 6.7% (1.074 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.5% (1.114 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.2 MB 
    Collection start time: 21:51:12 07/07/2023 UTC
    Collection stop time: 21:52:03 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py for run 19
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-125918-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-125918-c4130-node.v100ub
vtune: Executing actions 12 % Loading '125918-125923.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-125923-9cc40765.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 20 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 81.831s
    CPU Time: 19.380s
        Effective Time: 19.316s
        Spin Time: 0.064s
            Imbalance or Serial Spinning: 0.064s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0s
            Creation: 0s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 80.306s

Top Hotspots
Functionodule           CPU Time  % of CPU Time(%)

c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(float)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>)#2}>>                                                                                                 libtorch_cpu.so   14.554s             75.1%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}>>  libtorch_cpu.so    2.404s             12.4%
at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                libtorch_cpu.so    2.348s             12.1%
gomp_simple_barrier_waitlibgomp.so.1       0.036s              0.2%
gomp_team_barrier_wait_endlibgomp.so.1       0.028s              0.1%
munmaplibc.so.6          0.010s              0.1%
Effective Physical Core Utilization: 77.4% (12.379 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 38.9% (12.450 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.7 MB 
    Collection start time: 21:52:12 07/07/2023 UTC
    Collection stop time: 21:53:33 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py for run 19
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-126049-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-126049-c4130-node.v100ub
vtune: Executing actions 12 % Loading '126049-126054.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-126054-92d176cd.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 51.291s
    CPU Time: 0.532s
        Effective Time: 0.532s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 50.754s

Top Hotspots
Function              Module                                    CPU Time  % of CPU Time(%)
--------------------  ----------------------------------------  --------  ----------------
ImagingFlipLeftRight  _imaging.cpython-310-x86_64-linux-gnu.so    0.532s            100.0%
Effective Physical Core Utilization: 5.5% (0.874 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 2.8% (0.888 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 3.9 MB 
    Collection start time: 21:53:50 07/07/2023 UTC
    Collection stop time: 21:54:41 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py for run 19
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-126162-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-126162-c4130-node.v100ub
vtune: Executing actions 12 % Loading '126162-126167.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-126167-7cb04155.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 51.463s
    CPU Time: 0.587s
        Effective Time: 0.587s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 50.724s

Top Hotspots
Function                        Module                                    CPU Time  % of CPU Time(%)
------------------------------  ----------------------------------------  --------  ----------------
ImagingResampleHorizontal_8bpc  _imaging.cpython-310-x86_64-linux-gnu.so    0.440s             75.0%
__memmove_avx_unaligned_erms    libc.so.6                                   0.117s             19.9%
_int_free                       libc.so.6                                   0.020s              3.4%
ImagingResampleVertical_8bpc    _imaging.cpython-310-x86_64-linux-gnu.so    0.010s              1.7%
Effective Physical Core Utilization: 6.5% (1.035 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.3% (1.052 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.0 MB 
    Collection start time: 21:54:50 07/07/2023 UTC
    Collection stop time: 21:55:41 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py for run 19
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-126325-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-126325-c4130-node.v100ub
vtune: Executing actions 12 % Loading '126325-126330.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-126330-252109a7.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 21 % Resolving information for `_multiarray_umath.cpyt
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 72.083s
    CPU Time: 25.871s
        Effective Time: 25.811s
        Spin Time: 0.060s
            Imbalance or Serial Spinning: 0.060s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0s
            Creation: 0s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 67.879s

Top Hotspots
Functionodule                                    CPU Time  % of CPU Time(%)

at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                                                                                                                                              libtorch_cpu.so                            11.505s             44.5%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1}>(, signed char, at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1} const&)::{lambda(char**long const*, long, long)#1}>  libtorch_cpu.so                             9.019s             34.9%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(unsigned char)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<unsigned char>)#2}>>                                                                                                                                                                                                               libtorch_cpu.so                             3.212s             12.4%
__memmove_avx_unaligned_ermslibc.so.6                                   1.336s              5.2%
ImagingPackimaging.cpython-310-x86_64-linux-gnu.so    0.673s              2.6%
[Otherss              0.5%
Effective Physical Core Utilization: 33.3% (5.321 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 19.3% (6.170 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 5.0 MB 
    Collection start time: 21:55:48 07/07/2023 UTC
    Collection stop time: 21:57:00 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py for run 20
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-126455-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-126455-c4130-node.v100ub
vtune: Executing actions 12 % Loading '126455-126460.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-126460-69eb2409.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libjpeg.so.9'         
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 49.866s
    CPU Time: 8.085s
        Effective Time: 8.085s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 41.771s

Top Hotspots
Function                      Module                                    CPU Time  % of CPU Time(%)
----------------------------  ----------------------------------------  --------  ----------------
jpeg_idct_16x16               libjpeg.so.9                                2.608s             32.3%
ImagingUnpackRGB              _imaging.cpython-310-x86_64-linux-gnu.so    1.660s             20.5%
__memmove_avx_unaligned_erms  libc.so.6                                   1.536s             19.0%
ycc_rgb_convert               libjpeg.so.9                                1.340s             16.6%
jpeg_idct_islow               libjpeg.so.9                                0.716s              8.9%
[Others]                      N/A                                         0.225s              2.8%
Effective Physical Core Utilization: 6.7% (1.077 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.5% (1.117 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/convertRGB.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.2 MB 
    Collection start time: 21:57:16 07/07/2023 UTC
    Collection stop time: 21:58:05 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py for run 20
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-126569-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-126569-c4130-node.v100ub
vtune: Executing actions 12 % Loading '126569-126574.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-126574-4f1c6248.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `python3.10'           
vtune: Executing actions 20 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 79.223s
    CPU Time: 15.401s
        Effective Time: 15.320s
        Spin Time: 0.082s
            Imbalance or Serial Spinning: 0.082s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0s
            Creation: 0s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 77.832s

Top Hotspots
Functionodule           CPU Time  % of CPU Time(%)

c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(float)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>)#2}>>                                                                                                 libtorch_cpu.so    9.177s             59.6%
at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                libtorch_cpu.so    3.106s             20.2%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}>>  libtorch_cpu.so    3.026s             19.6%
gomp_team_barrier_wait_endlibgomp.so.1       0.082s              0.5%
munmaplibc.so.6          0.010s              0.1%
Effective Physical Core Utilization: 52.5% (8.398 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 36.9% (11.807 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/Normalize.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.6 MB 
    Collection start time: 21:58:14 07/07/2023 UTC
    Collection stop time: 21:59:33 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py for run 20
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-126700-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-126700-c4130-node.v100ub
vtune: Executing actions 12 % Loading '126700-126705.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-126705-4244ce61.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 52.089s
    CPU Time: 0.985s
        Effective Time: 0.985s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 51.098s

Top Hotspots
Function              Module                                    CPU Time  % of CPU Time(%)
--------------------  ----------------------------------------  --------  ----------------
ImagingFlipLeftRight  _imaging.cpython-310-x86_64-linux-gnu.so    0.985s            100.0%
Effective Physical Core Utilization: 6.5% (1.036 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.4% (1.085 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomHorizontalFlip.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 3.9 MB 
    Collection start time: 21:59:49 07/07/2023 UTC
    Collection stop time: 22:00:41 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py for run 20
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-126817-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-126817-c4130-node.v100ub
vtune: Executing actions 12 % Loading '126817-126822.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-126822-ba10d4d1.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving information for `python3.10'           
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 51.741s
    CPU Time: 0.347s
        Effective Time: 0.347s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 51.281s

Top Hotspots
Function                        Module                                    CPU Time  % of CPU Time(%)
------------------------------  ----------------------------------------  --------  ----------------
ImagingResampleHorizontal_8bpc  _imaging.cpython-310-x86_64-linux-gnu.so    0.228s             65.7%
__memmove_avx_unaligned_erms    libc.so.6                                   0.089s             25.6%
_int_free                       libc.so.6                                   0.020s              5.8%
ImagingResampleVertical_8bpc    _imaging.cpython-310-x86_64-linux-gnu.so    0.010s              2.9%
Effective Physical Core Utilization: 6.4% (1.031 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.3% (1.045 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/RandomResizedCrop.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 4.0 MB 
    Collection start time: 22:00:51 07/07/2023 UTC
    Collection stop time: 22:01:42 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Running /proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py for run 20
vtune: Warning: Pause command is not supported for managed code profiling. Runtime overhead is still possible. Data size limit may be exceeded.
vtune: Collection paused.
EMON collector successfully paused.
vtune: Collection paused.
vtune: Collection resumed.
vtune: Collection detached.
vtune: Collection stopped.
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-126931-c4130-node.v100ub
vtune: Executing actions 12 % Loading 'systemcollector-126931-c4130-node.v100ub
vtune: Executing actions 12 % Loading '126931-126936.0.trace' file             
vtune: Executing actions 12 % Loading 'userapicollector-126936-adc9e5ce.trace' 
vtune: Executing actions 12 % Loading '/root/low_level_func/data.0/emon.0.emon'
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for dangling locations     
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Executing actions 19 % Resolving information for `libgomp.so.1'         
vtune: Executing actions 19 % Resolving information for `libc10.so'            
vtune: Executing actions 19 % Resolving information for `_imaging.cpython-310-x
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libc10.so'.

vtune: Executing actions 20 % Resolving information for `_imaging.cpython-310-x
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `python3.10'           
vtune: Executing actions 21 % Resolving information for `_multiarray_umath.cpyt
vtune: Warning: Cannot locate debugging information for file `/opt/intel/oneapi/vtune/2023.1.0/lib64/libtpsstool.so'.

vtune: Executing actions 21 % Resolving information for `libtorch_python.so'   
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_python.so'.

vtune: Executing actions 22 % Resolving information for `libtorch_python.so'   
vtune: Executing actions 22 % Resolving information for `libtorch_cpu.so'      
vtune: Warning: Cannot locate debugging information for file `/proj/prismgt-PG0/anaconda3/envs/torch2/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so'.

vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Setting data model parameters                    
vtune: Executing actions 32 % Setting data model parameters                    
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 32 % Precomputing frequently used data                
vtune: Executing actions 33 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 38 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Updating precomputed scalar metrics              
vtune: Executing actions 39 % Discarding redundant overtime data               
vtune: Executing actions 41 % Discarding redundant overtime data               
vtune: Executing actions 41 % Saving the result                                
vtune: Executing actions 42 % Saving the result                                
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 73.109s
    CPU Time: 23.759s
        Effective Time: 23.685s
        Spin Time: 0.074s
            Imbalance or Serial Spinning: 0.074s
            Lock Contention: 0s
            Other: 0s
        Overhead Time: 0s
            Creation: 0s
            Scheduling: 0s
            Reduction: 0s
            Atomics: 0s
            Other: 0s
    Total Thread Count: 16
    Paused Time: 68.984s

Top Hotspots
Function                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Module                                    CPU Time  % of CPU Time(%)

at::native::AVX2::vectorized_loop<at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(floatfloat)#1}&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<float>at::vec::AVX2::Vectorized<float>)#2}&>.isra.0                                                                                                                                                                                                                              libtorch_cpu.so                            10.382s             43.7%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1}>(, signed char, at::native::AVX2::copy_kernel(at::TensorIterator&, bool)::{lambda()#1}::operator()(void) const::{lambda()#7}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(char**long const*, long)#1} const&)::{lambda(char**long const*, long, long)#1}>  libtorch_cpu.so                             7.937s             33.4%
c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::native::AVX2::VectorizedLoop2d<at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(unsigned char)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&)::{lambda()#3}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda(at::vec::AVX2::Vectorized<unsigned char>)#2}>>                                                                                                                                                                                                               libtorch_cpu.so                             3.274s             13.8%
__memmove_avx_unaligned_ermslibc.so.6                                   1.332s              5.6%
ImagingPackimaging.cpython-310-x86_64-linux-gnu.so    0.678s              2.9%
[Otherss              0.7%
Effective Physical Core Utilization: 31.6% (5.063 out of 16)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 19.0% (6.077 out of 32)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: /proj/prismgt-PG0/anaconda3/envs/torch2/bin/python "/proj/prismgt-PG0/rbachkaniwala3/code/low_level_func/ToTensor.py" 
    Operating System: 5.4.0-139-generic DISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION="Ubuntu 20.04 LTS"
    Computer Name: c4130-node.v100ubuntu20.prismgt-pg0.wisc.cloudlab.us
    Result Size: 5.0 MB 
    Collection start time: 22:01:50 07/07/2023 UTC
    Collection stop time: 22:03:03 07/07/2023 UTC
    Collector Type: Event-based counting driver,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 3.200 GHz
        Logical CPU Count: 32
        LLC size: 26.2 MB 
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
vtune: Using result path `/root/low_level_func'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions 50 % Finalizing results                               
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              
vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
Done running all programs